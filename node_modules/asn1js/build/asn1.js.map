{"version":3,"sources":["../src/asn1.js"],"names":["assertBigInt","BigInt","Error","powers2","Uint8Array","digitsString","LocalBaseBlock","constructor","parameters","blockLength","error","warnings","valueBeforeDecode","slice","ArrayBuffer","blockName","toJSON","byteLength","HexBlock","BaseClass","LocalHexBlockMixin","isHexOnly","valueHex","fromBER","inputBuffer","inputOffset","inputLength","intBuffer","length","push","toBER","sizeOnly","object","ex","LocalIdentificationBlock","idBlock","tagClass","tagNumber","isConstructed","firstOctet","retBuf","retView","number","encodedBuf","encodedView","size","i","curView","tagClassMask","tagNumberMask","count","tagNumberBufferMaxLength","intTagNumberBuffer","tempBuffer","tempBufferView","set","LocalLengthBlock","isIndefiniteForm","lenBlock","longFormUsed","lengthBufferView","ValueBlock","TypeError","BaseBlock","valueBlockType","name","optional","primitiveSchema","valueBlock","resultOffset","retBufs","idBlockBuf","valueBlockSizeBuf","lenBlockBuf","valueBlockBuf","indefBuf","indefView","toString","LocalPrimitiveValueBlock","valueHexView","Primitive","LocalConstructedValueBlock","value","initialOffset","initialLength","checkLen","indefiniteLength","currentOffset","returnObject","LocalFromBER","offset","result","concat","EndOfContent","pop","valueBuf","Constructed","values","split","map","o","join","LocalEndOfContentValueBlock","paramaters","LocalBooleanValueBlock","view","utilDecodeTC","call","Boolean","Sequence","Set","Null","LocalOctetStringValueBlock","prototype","currentBlockName","OctetString","buf","asn","e","isEqual","octetString","JSON","stringify","LocalBitStringValueBlock","unusedBits","BitString","bitString","bits","byte","padStart","LocalIntegerValueBlock","valueDec","_value","_valueHex","_valueDec","fromDER","expectedLength","updatedValueHex","updatedView","toDER","viewAdd","first","second","c","firstView","secondView","firstViewCopy","firstViewCopyLength","secondViewCopy","secondViewCopyLength","max","counter","power2","n","p","digits","newValue","viewSub","b","firstBit","bitNumber","currentByte","asn1View","flag","byteNumber","charAt","Integer","otherValue","convertToDER","integer","convertFromDER","hex","bigInt","Enumerated","LocalSidValueBlock","isFirstSid","tempValueHex","tempView","valueBigInt","bytes","parseInt","buffer","sidValue","LocalObjectIdentifierValueBlock","fromString","sidBlock","string","pos1","pos2","sid","indexOf","substr","plus","parsedSID","isNaN","Number","MAX_SAFE_INTEGER","sidStr","sidArray","ObjectIdentifier","LocalUtf8StringValueBlock","Utf8String","fromBuffer","String","fromCharCode","apply","decodeURIComponent","escape","inputString","str","unescape","encodeURIComponent","strLen","charCodeAt","LocalRelativeSidValueBlock","LocalRelativeObjectIdentifierValueBlock","RelativeObjectIdentifier","LocalBmpStringValueBlock","BmpString","copyBuffer","valueView","temp","Uint16Array","strLength","codeBuf","codeView","dif","j","LocalUniversalStringValueBlock","UniversalString","Uint32Array","LocalSimpleStringValueBlock","LocalSimpleStringBlock","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","UTCTime","year","month","day","hour","minute","fromDate","valueDate","toBuffer","inputDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toDate","Date","UTC","parser","parserArray","exec","outputArray","Array","GeneralizedTime","millisecond","getUTCMilliseconds","isUTC","timeString","dateTimeString","fractionPart","hourDifference","minuteDifference","valueOf","multiplier","differencePosition","differenceString","fractionPointPosition","fractionPartCheck","fractionResult","Math","floor","tempDate","getUTCDay","DATE","TimeOfDay","DateTime","Duration","TIME","Choice","Any","Repeated","local","RawData","data","incomingOffset","localChangeType","inputObject","newType","newObject","Object","baseBlock","newASN1Type","compareSchema","root","inputData","inputSchema","choiceResult","verified","_result","hasOwnProperty","encodedId","decodedOffset","schemaView","replace","admission","maxLength","_optional","arrayRoot","asn1","verifySchema","fromJSON","json"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\n/*\n * Copyright (c) 2016-2018, Peculiar Ventures\n * All rights reserved.\n *\n * Author 2016-2018, Yury Strozhevsky <www.strozhevsky.com>.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its contributors\n *    may be used to endorse or promote products derived from this software without\n *    specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n * OF SUCH DAMAGE.\n *\n */\n//**************************************************************************************\nimport { getParametersValue, padNumber, isEqualBuffer, bufferToHexCodes, checkBufferParams, utilToBase, utilFromBase, utilEncodeTC, utilDecodeTC, utilConcatBuf, utilConcatView } from \"pvutils\";\n//**************************************************************************************\n//region Other utility functions\n//**************************************************************************************\nfunction assertBigInt() {\n  if (typeof BigInt === \"undefined\") {\n    throw new Error(\"BigInt is not defined. Your environment doesn't implement BigInt.\")\n  }\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of global variables\n//**************************************************************************************\nconst powers2 = [new Uint8Array([1])];\nconst digitsString = \"0123456789\";\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration for \"LocalBaseBlock\" class\n//**************************************************************************************\n/**\n * Class used as a base block for all remaining ASN.1 classes\n * @typedef LocalBaseBlock\n * @interface\n * @property {number} blockLength\n * @property {string} error\n * @property {Array.<string>} warnings\n * @property {ArrayBuffer} valueBeforeDecode\n */\nclass LocalBaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBaseBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueBeforeDecode]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {number} blockLength\n\t\t */\n\t\tthis.blockLength = getParametersValue(parameters, \"blockLength\", 0);\n\t\t/**\n\t\t * @type {string} error\n\t\t */\n\t\tthis.error = getParametersValue(parameters, \"error\", \"\");\n\t\t/**\n\t\t * @type {Array.<string>} warnings\n\t\t */\n\t\tthis.warnings = getParametersValue(parameters, \"warnings\", []);\n\t\t//noinspection JSCheckFunctionSignatures\n\t\t/**\n\t\t * @type {ArrayBuffer} valueBeforeDecode\n\t\t */\n\t\tif(\"valueBeforeDecode\" in parameters)\n\t\t\tthis.valueBeforeDecode = parameters.valueBeforeDecode.slice(0);\n\t\telse\n\t\t\tthis.valueBeforeDecode = new ArrayBuffer(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"baseBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tblockName: this.constructor.blockName(),\n\t\t\tblockLength: this.blockLength,\n\t\t\terror: this.error,\n\t\t\twarnings: this.warnings,\n\t\t\tvalueBeforeDecode: bufferToHexCodes(this.valueBeforeDecode, 0, this.valueBeforeDecode.byteLength)\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Description for \"HexBlock\" class\n//**************************************************************************************\n/**\n * Class used as a base block for all remaining ASN.1 classes\n * @extends LocalBaseBlock\n * @typedef HexBlock\n * @property {number} blockLength\n * @property {string} error\n * @property {Array.<string>} warnings\n * @property {ArrayBuffer} valueBeforeDecode\n * @property {boolean} isHexOnly\n * @property {ArrayBuffer} valueHex\n */\n//noinspection JSUnusedLocalSymbols\nexport const HexBlock = BaseClass => class LocalHexBlockMixin extends BaseClass\n{\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Constructor for \"HexBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", false);\n\t\t/**\n\t\t * @type {ArrayBuffer}\n\t\t */\n\t\tif(\"valueHex\" in parameters)\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\n\t\telse\n\t\t\tthis.valueHex = new ArrayBuffer(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"hexBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.warnings.push(\"Zero buffer length\");\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//endregion\n\n\t\t//region Copy input buffer to internal buffer\n\t\tthis.valueHex = inputBuffer.slice(inputOffset, inputOffset + inputLength);\n\t\t//endregion\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tif(this.isHexOnly !== true)\n\t\t{\n\t\t\tthis.error = \"Flag \\\"isHexOnly\\\" is not set, abort\";\n\t\t\treturn new ArrayBuffer(0);\n\t\t}\n\n\t\tif(sizeOnly === true)\n\t\t\treturn new ArrayBuffer(this.valueHex.byteLength);\n\n\t\t//noinspection JSCheckFunctionSignatures\n\t\treturn this.valueHex.slice(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.blockName = this.constructor.blockName();\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n};\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of identification block class\n//**************************************************************************************\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBaseBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {Object} [idBlock]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper();\n\n\t\tif(\"idBlock\" in parameters)\n\t\t{\n\t\t\t//region Properties from hexBlock class\n\t\t\tthis.isHexOnly = getParametersValue(parameters.idBlock, \"isHexOnly\", false);\n\t\t\tthis.valueHex = getParametersValue(parameters.idBlock, \"valueHex\", new ArrayBuffer(0));\n\t\t\t//endregion\n\n\t\t\tthis.tagClass = getParametersValue(parameters.idBlock, \"tagClass\", (-1));\n\t\t\tthis.tagNumber = getParametersValue(parameters.idBlock, \"tagNumber\", (-1));\n\t\t\tthis.isConstructed = getParametersValue(parameters.idBlock, \"isConstructed\", false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.tagClass = (-1);\n\t\t\tthis.tagNumber = (-1);\n\t\t\tthis.isConstructed = false;\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"identificationBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//region Initial variables\n\t\tlet firstOctet = 0;\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//endregion\n\n\t\tswitch(this.tagClass)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\tfirstOctet |= 0x00; // UNIVERSAL\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tfirstOctet |= 0x40; // APPLICATION\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tfirstOctet |= 0x80; // CONTEXT-SPECIFIC\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tfirstOctet |= 0xC0; // PRIVATE\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.error = \"Unknown tag class\";\n\t\t\t\treturn (new ArrayBuffer(0));\n\t\t}\n\n\t\tif(this.isConstructed)\n\t\t\tfirstOctet |= 0x20;\n\n\t\tif((this.tagNumber < 31) && (!this.isHexOnly))\n\t\t{\n\t\t\tretBuf = new ArrayBuffer(1);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tif(!sizeOnly)\n\t\t\t{\n\t\t\t\tlet number = this.tagNumber;\n\t\t\t\tnumber &= 0x1F;\n\t\t\t\tfirstOctet |= number;\n\n\t\t\t\tretView[0] = firstOctet;\n\t\t\t}\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tif(this.isHexOnly === false)\n\t\t{\n\t\t\tconst encodedBuf = utilToBase(this.tagNumber, 7);\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tconst size = encodedBuf.byteLength;\n\n\t\t\tretBuf = new ArrayBuffer(size + 1);\n\t\t\tretView = new Uint8Array(retBuf);\n\t\t\tretView[0] = (firstOctet | 0x1F);\n\n\t\t\tif(!sizeOnly)\n\t\t\t{\n\t\t\t\tfor(let i = 0; i < (size - 1); i++)\n\t\t\t\t\tretView[i + 1] = encodedView[i] | 0x80;\n\n\t\t\t\tretView[size] = encodedView[size - 1];\n\t\t\t}\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\n\t\tretView = new Uint8Array(retBuf);\n\n\t\tretView[0] = (firstOctet | 0x1F);\n\n\t\tif(sizeOnly === false)\n\t\t{\n\t\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\t\tfor(let i = 0; i < (curView.length - 1); i++)\n\t\t\t\tretView[i + 1] = curView[i] | 0x80;\n\n\t\t\tretView[this.valueHex.byteLength] = curView[curView.length - 1];\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.error = \"Zero buffer length\";\n\t\t\treturn (-1);\n\t\t}\n\t\t//endregion\n\n\t\t//region Find tag class\n\t\tconst tagClassMask = intBuffer[0] & 0xC0;\n\n\t\tswitch(tagClassMask)\n\t\t{\n\t\t\tcase 0x00:\n\t\t\t\tthis.tagClass = (1); // UNIVERSAL\n\t\t\t\tbreak;\n\t\t\tcase 0x40:\n\t\t\t\tthis.tagClass = (2); // APPLICATION\n\t\t\t\tbreak;\n\t\t\tcase 0x80:\n\t\t\t\tthis.tagClass = (3); // CONTEXT-SPECIFIC\n\t\t\t\tbreak;\n\t\t\tcase 0xC0:\n\t\t\t\tthis.tagClass = (4); // PRIVATE\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.error = \"Unknown tag class\";\n\t\t\t\treturn (-1);\n\t\t}\n\t\t//endregion\n\n\t\t//region Find it's constructed or not\n\t\tthis.isConstructed = (intBuffer[0] & 0x20) === 0x20;\n\t\t//endregion\n\n\t\t//region Find tag number\n\t\tthis.isHexOnly = false;\n\n\t\tconst tagNumberMask = intBuffer[0] & 0x1F;\n\n\t\t//region Simple case (tag number < 31)\n\t\tif(tagNumberMask !== 0x1F)\n\t\t{\n\t\t\tthis.tagNumber = (tagNumberMask);\n\t\t\tthis.blockLength = 1;\n\t\t}\n\t\t//endregion\n\t\t//region Tag number bigger or equal to 31\n\t\telse\n\t\t{\n\t\t\tlet count = 1;\n\n\t\t\tthis.valueHex = new ArrayBuffer(255);\n\t\t\tlet tagNumberBufferMaxLength = 255;\n\t\t\tlet intTagNumberBuffer = new Uint8Array(this.valueHex);\n\n\t\t\t//noinspection JSBitwiseOperatorUsage\n\t\t\twhile(intBuffer[count] & 0x80)\n\t\t\t{\n\t\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n\t\t\t\tcount++;\n\n\t\t\t\tif(count >= intBuffer.length)\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\n\t\t\t\t//region In case if tag number length is greater than 255 bytes (rare but possible case)\n\t\t\t\tif(count === tagNumberBufferMaxLength)\n\t\t\t\t{\n\t\t\t\t\ttagNumberBufferMaxLength += 255;\n\n\t\t\t\t\tconst tempBuffer = new ArrayBuffer(tagNumberBufferMaxLength);\n\t\t\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\n\n\t\t\t\t\tfor(let i = 0; i < intTagNumberBuffer.length; i++)\n\t\t\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\n\n\t\t\t\t\tthis.valueHex = new ArrayBuffer(tagNumberBufferMaxLength);\n\t\t\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\n\t\t\t\t}\n\t\t\t\t//endregion\n\t\t\t}\n\n\t\t\tthis.blockLength = (count + 1);\n\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F; // Write last byte to buffer\n\n\t\t\t//region Cut buffer\n\t\t\tconst tempBuffer = new ArrayBuffer(count);\n\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\n\n\t\t\tfor(let i = 0; i < count; i++)\n\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\n\n\t\t\tthis.valueHex = new ArrayBuffer(count);\n\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\n\t\t\tintTagNumberBuffer.set(tempBufferView);\n\t\t\t//endregion\n\n\t\t\t//region Try to convert long tag number to short form\n\t\t\tif(this.blockLength <= 9)\n\t\t\t\tthis.tagNumber = utilFromBase(intTagNumberBuffer, 7);\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.isHexOnly = true;\n\t\t\t\tthis.warnings.push(\"Tag too long, represented as hex-coded\");\n\t\t\t}\n\t\t\t//endregion\n\t\t}\n\t\t//endregion\n\t\t//endregion\n\n\t\t//region Check if constructed encoding was using for primitive type\n\t\tif(((this.tagClass === 1)) &&\n\t\t\t(this.isConstructed))\n\t\t{\n\t\t\tswitch(this.tagNumber)\n\t\t\t{\n\t\t\t\tcase 1:  // Boolean\n\t\t\t\tcase 2:  // REAL\n\t\t\t\tcase 5:  // Null\n\t\t\t\tcase 6:  // OBJECT IDENTIFIER\n\t\t\t\tcase 9:  // REAL\n\t\t\t\tcase 13: // RELATIVE OBJECT IDENTIFIER\n\t\t\t\tcase 14: // Time\n\t\t\t\tcase 23:\n\t\t\t\tcase 24:\n\t\t\t\tcase 31:\n\t\t\t\tcase 32:\n\t\t\t\tcase 33:\n\t\t\t\tcase 34:\n\t\t\t\t\tthis.error = \"Constructed encoding used for primitive type\";\n\t\t\t\t\treturn (-1);\n\t\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t\t//endregion\n\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName: string,\n\t *  tagClass: number,\n\t *  tagNumber: number,\n\t *  isConstructed: boolean,\n\t *  isHexOnly: boolean,\n\t *  valueHex: ArrayBuffer,\n\t *  blockLength: number,\n\t *  error: string, warnings: Array.<string>,\n\t *  valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.blockName = this.constructor.blockName();\n\t\tobject.tagClass = this.tagClass;\n\t\tobject.tagNumber = this.tagNumber;\n\t\tobject.isConstructed = this.isConstructed;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of length block class\n//**************************************************************************************\nclass LocalLengthBlock extends LocalBaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalLengthBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {Object} [lenBlock]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper();\n\n\t\tif(\"lenBlock\" in parameters)\n\t\t{\n\t\t\tthis.isIndefiniteForm = getParametersValue(parameters.lenBlock, \"isIndefiniteForm\", false);\n\t\t\tthis.longFormUsed = getParametersValue(parameters.lenBlock, \"longFormUsed\", false);\n\t\t\tthis.length = getParametersValue(parameters.lenBlock, \"length\", 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.isIndefiniteForm = false;\n\t\t\tthis.longFormUsed = false;\n\t\t\tthis.length = 0;\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"lengthBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.error = \"Zero buffer length\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tif(intBuffer[0] === 0xFF)\n\t\t{\n\t\t\tthis.error = \"Length block 0xFF is reserved by standard\";\n\t\t\treturn (-1);\n\t\t}\n\t\t//endregion\n\n\t\t//region Check for length form type\n\t\tthis.isIndefiniteForm = intBuffer[0] === 0x80;\n\t\t//endregion\n\n\t\t//region Stop working in case of indefinite length form\n\t\tif(this.isIndefiniteForm === true)\n\t\t{\n\t\t\tthis.blockLength = 1;\n\t\t\treturn (inputOffset + this.blockLength);\n\t\t}\n\t\t//endregion\n\n\t\t//region Check is long form of length encoding using\n\t\tthis.longFormUsed = !!(intBuffer[0] & 0x80);\n\t\t//endregion\n\n\t\t//region Stop working in case of short form of length value\n\t\tif(this.longFormUsed === false)\n\t\t{\n\t\t\tthis.length = (intBuffer[0]);\n\t\t\tthis.blockLength = 1;\n\t\t\treturn (inputOffset + this.blockLength);\n\t\t}\n\t\t//endregion\n\n\t\t//region Calculate length value in case of long form\n\t\tconst count = intBuffer[0] & 0x7F;\n\n\t\tif(count > 8) // Too big length value\n\t\t{\n\t\t\tthis.error = \"Too big integer\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tif((count + 1) > intBuffer.length)\n\t\t{\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tconst lengthBufferView = new Uint8Array(count);\n\n\t\tfor(let i = 0; i < count; i++)\n\t\t\tlengthBufferView[i] = intBuffer[i + 1];\n\n\t\tif(lengthBufferView[count - 1] === 0x00)\n\t\t\tthis.warnings.push(\"Needlessly long encoded length\");\n\n\t\tthis.length = utilFromBase(lengthBufferView, 8);\n\n\t\tif(this.longFormUsed && (this.length <= 127))\n\t\t\tthis.warnings.push(\"Unnecessary usage of long length form\");\n\n\t\tthis.blockLength = count + 1;\n\t\t//endregion\n\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//region Initial variables\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//endregion\n\n\t\tif(this.length > 127)\n\t\t\tthis.longFormUsed = true;\n\n\t\tif(this.isIndefiniteForm)\n\t\t{\n\t\t\tretBuf = new ArrayBuffer(1);\n\n\t\t\tif(sizeOnly === false)\n\t\t\t{\n\t\t\t\tretView = new Uint8Array(retBuf);\n\t\t\t\tretView[0] = 0x80;\n\t\t\t}\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tif(this.longFormUsed === true)\n\t\t{\n\t\t\tconst encodedBuf = utilToBase(this.length, 8);\n\n\t\t\tif(encodedBuf.byteLength > 127)\n\t\t\t{\n\t\t\t\tthis.error = \"Too big length\";\n\t\t\t\treturn (new ArrayBuffer(0));\n\t\t\t}\n\n\t\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\n\n\t\t\tif(sizeOnly === true)\n\t\t\t\treturn retBuf;\n\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tretView[0] = encodedBuf.byteLength | 0x80;\n\n\t\t\tfor(let i = 0; i < encodedBuf.byteLength; i++)\n\t\t\t\tretView[i + 1] = encodedView[i];\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(1);\n\n\t\tif(sizeOnly === false)\n\t\t{\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tretView[0] = this.length;\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.blockName = this.constructor.blockName();\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\n\t\tobject.longFormUsed = this.longFormUsed;\n\t\tobject.length = this.length;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of value block class\n//**************************************************************************************\nexport class ValueBlock extends LocalBaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"ValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"valueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols,JSUnusedLocalSymbols\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"ValueBlock\\\"\");\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"ValueBlock\\\"\");\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of basic ASN.1 block class\n//**************************************************************************************\nexport class BaseBlock extends LocalBaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"BaseBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {Object} [primitiveSchema]\n\t * @property {string} [name]\n\t * @property {boolean} [optional]\n\t * @param valueBlockType Type of value block\n\t */\n\tconstructor(parameters = {}, valueBlockType = ValueBlock)\n\t{\n\t\tsuper(parameters);\n\n\t\tif(\"name\" in parameters)\n\t\t\tthis.name = parameters.name;\n\t\tif(\"optional\" in parameters)\n\t\t\tthis.optional = parameters.optional;\n\t\tif(\"primitiveSchema\" in parameters)\n\t\t\tthis.primitiveSchema = parameters.primitiveSchema;\n\n\t\tthis.idBlock = new LocalIdentificationBlock(parameters);\n\t\tthis.lenBlock = new LocalLengthBlock(parameters);\n\t\tthis.valueBlock = new valueBlockType(parameters);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BaseBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tconst retBufs = [];\n\n\t\tconst idBlockBuf = this.idBlock.toBER(sizeOnly);\n\t\tconst valueBlockSizeBuf = this.valueBlock.toBER(true);\n\n\t\tthis.lenBlock.length = valueBlockSizeBuf.byteLength;\n\t\tconst lenBlockBuf = this.lenBlock.toBER(sizeOnly);\n\n\t\tretBufs.push(idBlockBuf, lenBlockBuf);\n\n\t\tlet valueBlockBuf;\n\n\t\tif(sizeOnly === false)\n\t\t\tvalueBlockBuf = this.valueBlock.toBER(sizeOnly);\n\t\telse\n\t\t\tvalueBlockBuf = new ArrayBuffer(this.lenBlock.length);\n\n\t\t\tretBufs.push(valueBlockBuf);\n\n\t\t\tif(this.lenBlock.isIndefiniteForm === true)\n\t\t\t{\n\t\t\tconst indefBuf = new ArrayBuffer(2);\n\t\t\t\n\t\t\tif(sizeOnly === false)\n\t\t\t{\n\t\t\t\tconst indefView = new Uint8Array(indefBuf);\n\n\t\t\t\tindefView[0] = 0x00;\n\t\t\t\tindefView[1] = 0x00;\n\t\t\t}\n\t\t\t\n\t\t\tretBufs.push(indefBuf);\n\t\t}\n\t\t\n\t\treturn utilConcatBuf(...retBufs);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.idBlock = this.idBlock.toJSON();\n\t\tobject.lenBlock = this.lenBlock.toJSON();\n\t\tobject.valueBlock = this.valueBlock.toJSON();\n\n\t\tif(\"name\" in this)\n\t\t\tobject.name = this.name;\n\t\tif(\"optional\" in this)\n\t\t\tobject.optional = this.optional;\n\t\tif(\"primitiveSchema\" in this)\n\t\t\tobject.primitiveSchema = this.primitiveSchema.toJSON();\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n\ttoString() {\n\t\treturn `${this.constructor.blockName()} : ${bufferToHexCodes(this.valueBlock.valueHex)}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of basic block for all PRIMITIVE types\n//**************************************************************************************\nclass LocalPrimitiveValueBlock extends ValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalPrimitiveValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueBeforeDecode]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\t//region Variables from \"hexBlock\" class\n\t\tif(\"valueHex\" in parameters)\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\n\t\telse\n\t\t\tthis.valueHex = new ArrayBuffer(0);\n\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", true);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.warnings.push(\"Zero buffer length\");\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//endregion\n\n\t\t//region Copy input buffer into internal buffer\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\n\t\tconst valueHexView = new Uint8Array(this.valueHex);\n\n\t\tfor(let i = 0; i < intBuffer.length; i++)\n\t\t\tvalueHexView[i] = intBuffer[i];\n\t\t//endregion\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\treturn this.valueHex.slice(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"PrimitiveValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\t\tobject.isHexOnly = this.isHexOnly;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Primitive extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Primitive\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalPrimitiveValueBlock);\n\n\t\tthis.idBlock.isConstructed = false;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"PRIMITIVE\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of basic block for all CONSTRUCTED types\n//**************************************************************************************\nclass LocalConstructedValueBlock extends ValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalConstructedValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.value = getParametersValue(parameters, \"value\", []);\n\t\tthis.isIndefiniteForm = getParametersValue(parameters, \"isIndefiniteForm\", false);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Store initial offset and length\n\t\tconst initialOffset = inputOffset;\n\t\tconst initialLength = inputLength;\n\t\t//endregion\n\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.warnings.push(\"Zero buffer length\");\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//endregion\n\n\t\t//region Aux function\n\t\tfunction checkLen(indefiniteLength, length)\n\t\t{\n\t\t\tif(indefiniteLength === true)\n\t\t\t\treturn 1;\n\n\t\t\treturn length;\n\t\t}\n\t\t//endregion\n\n\t\tlet currentOffset = inputOffset;\n\n\t\twhile(checkLen(this.isIndefiniteForm, inputLength) > 0)\n\t\t{\n\t\t\tconst returnObject = LocalFromBER(inputBuffer, currentOffset, inputLength);\n\t\t\tif(returnObject.offset === (-1))\n\t\t\t{\n\t\t\t\tthis.error = returnObject.result.error;\n\t\t\t\tthis.warnings.concat(returnObject.result.warnings);\n\t\t\t\treturn (-1);\n\t\t\t}\n\n\t\t\tcurrentOffset = returnObject.offset;\n\n\t\t\tthis.blockLength += returnObject.result.blockLength;\n\t\t\tinputLength -= returnObject.result.blockLength;\n\n\t\t\tthis.value.push(returnObject.result);\n\n\t\t\tif((this.isIndefiniteForm === true) && (returnObject.result.constructor.blockName() === EndOfContent.blockName()))\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif(this.isIndefiniteForm === true)\n\t\t{\n\t\t\tif(this.value[this.value.length - 1].constructor.blockName() === EndOfContent.blockName())\n\t\t\t\tthis.value.pop();\n\t\t\telse\n\t\t\t\tthis.warnings.push(\"No EndOfContent block encoded\");\n\t\t}\n\n\t\t//region Copy \"inputBuffer\" to \"valueBeforeDecode\"\n\t\tthis.valueBeforeDecode = inputBuffer.slice(initialOffset, initialOffset + initialLength);\n\t\t//endregion\n\n\t\treturn currentOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tconst retBufs = []\n\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t{\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\n\t\t\tretBufs.push(valueBuf);\n\t\t}\n\n\t\treturn utilConcatBuf(...retBufs);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"ConstructedValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\n\t\tobject.value = [];\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t\tobject.value.push(this.value[i].toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Constructed extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Constructed\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalConstructedValueBlock);\n\n\t\tthis.idBlock.isConstructed = true;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"CONSTRUCTED\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\ttoString() {\n\t\tconst values = [];\n\t\tfor (const value of this.valueBlock.value) {\n\t\t\tvalues.push(value.toString().split(\"\\n\").map(o => `  ${o}`).join(\"\\n\"));\n\t\t}\n\t\tconst blockName = this.idBlock.tagClass === 3\n\t\t\t? `[${this.idBlock.tagNumber}]`\n\t\t\t: this.constructor.blockName();\n\t\treturn values.length \n\t\t\t? `${blockName} :\\n${values.join(\"\\n\")}` // items\n\t\t\t: `${blockName} :`; // empty\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 EndOfContent type class\n//**************************************************************************************\nclass LocalEndOfContentValueBlock extends ValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalEndOfContentValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region There is no \"value block\" for EndOfContent type and we need to return the same offset\n\t\treturn inputOffset;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\treturn new ArrayBuffer(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"EndOfContentValueBlock\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class EndOfContent extends BaseBlock\n{\n\t//**********************************************************************************\n\tconstructor(paramaters = {})\n\t{\n\t\tsuper(paramaters, LocalEndOfContentValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 0; // EndOfContent\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"EndOfContent\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Boolean type class\n//**************************************************************************************\nclass LocalBooleanValueBlock extends ValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBooleanValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\t\t\n\t\tthis.value = getParametersValue(parameters, \"value\", false);\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", false);\n\t\t\n\t\tif(\"valueHex\" in parameters)\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\n\t\telse\n\t\t{\n\t\t\tthis.valueHex = new ArrayBuffer(1);\n\t\t\tif(this.value === true)\n\t\t\t{\n\t\t\t\tconst view = new Uint8Array(this.valueHex);\n\t\t\t\tview[0] = 0xFF;\n\t\t\t}\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\tif(inputLength > 1)\n\t\t\tthis.warnings.push(\"Boolean value encoded in more then 1 octet\");\n\n\t\tthis.isHexOnly = true;\n\n\t\t//region Copy input buffer to internal array\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\n\t\tconst view = new Uint8Array(this.valueHex);\n\n\t\tfor(let i = 0; i < intBuffer.length; i++)\n\t\t\tview[i] = intBuffer[i];\n\t\t//endregion\n\t\t\n\t\tif(utilDecodeTC.call(this) !== 0 )\n\t\t\tthis.value = true;\n\t\telse\n\t\t\tthis.value = false;\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\treturn this.valueHex;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BooleanValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Boolean extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Boolean\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalBooleanValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 1; // Boolean\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BOOLEAN\";\n\t}\n\t//**********************************************************************************\n\ttoString() {\n\t\treturn `${this.constructor.blockName()} : ${this.valueBlock.value}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Sequence and Set type classes\n//**************************************************************************************\nexport class Sequence extends Constructed\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Sequence\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 16; // Sequence\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"SEQUENCE\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Set extends Constructed\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Set\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 17; // Set\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"SET\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Null type class\n//**************************************************************************************\nexport class Null extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Null\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalBaseBlock); // We will not have a call to \"Null value block\" because of specified \"fromBER\" and \"toBER\" functions\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 5; // Null\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"NULL\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tif(this.lenBlock.length > 0)\n\t\t\tthis.warnings.push(\"Non-zero length of value block for Null type\");\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\t\t\n\t\tthis.blockLength += inputLength;\n\t\t\n\t\tif((inputOffset + inputLength) > inputBuffer.byteLength)\n\t\t{\n\t\t\tthis.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n\t\t\treturn (-1);\n\t\t}\n\t\t\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tconst retBuf = new ArrayBuffer(2);\n\n\t\tif(sizeOnly === true)\n\t\t\treturn retBuf;\n\n\t\tconst retView = new Uint8Array(retBuf);\n\t\tretView[0] = 0x05;\n\t\tretView[1] = 0x00;\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\ttoString() {\n\t\treturn `${this.constructor.blockName()}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 OctetString type class\n//**************************************************************************************\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalOctetStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.isConstructed = getParametersValue(parameters, \"isConstructed\", false);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tlet resultOffset = 0;\n\n\t\tif(this.isConstructed === true)\n\t\t{\n\t\t\tthis.isHexOnly = false;\n\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n\t\t\tif(resultOffset === (-1))\n\t\t\t\treturn resultOffset;\n\n\t\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t\t{\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\n\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\n\t\t\t\t{\n\t\t\t\t\tif(this.isIndefiniteForm === true)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\n\t\t\t\t\t\treturn (-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(currentBlockName !== OctetString.blockName())\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"OCTET STRING may consists of OCTET STRINGs only\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.isHexOnly = true;\n\n\t\t\tresultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n\t\t\tthis.blockLength = inputLength;\n\t\t}\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tif(this.isConstructed === true)\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\n\n\t\tlet retBuf = new ArrayBuffer(this.valueHex.byteLength);\n\n\t\tif(sizeOnly === true)\n\t\t\treturn retBuf;\n\n\t\tif(this.valueHex.byteLength === 0)\n\t\t\treturn retBuf;\n\n\t\tretBuf = this.valueHex.slice(0);\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"OctetStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.isConstructed = this.isConstructed;\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class OctetString extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"OctetString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalOctetStringValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 4; // OctetString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n\n\t\t//region Ability to encode empty OCTET STRING\n\t\tif(inputLength === 0)\n\t\t{\n\t\t\tif(this.idBlock.error.length === 0)\n\t\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\t\tif(this.lenBlock.error.length === 0)\n\t\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//endregion\n\n\t\tif (!this.valueBlock.isConstructed) {\n\t\t\tconst buf = inputBuffer.slice(inputOffset, inputOffset + inputLength);\n\t\t\ttry {\n\t\t\t\tconst asn = fromBER(buf);\n\t\t\t\tif (asn.offset !== -1 && asn.offset === inputLength) {\n\t\t\t\t\tthis.valueBlock.value = [asn.result];\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// nothing\n\t\t\t}\n\t\t}\n\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"OCTET STRING\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Checking that two OCTETSTRINGs are equal\n\t * @param {OctetString} octetString\n\t */\n\tisEqual(octetString)\n\t{\n\t\t//region Check input type\n\t\tif((octetString instanceof OctetString) === false)\n\t\t\treturn false;\n\t\t//endregion\n\n\t\t//region Compare two JSON strings\n\t\tif(JSON.stringify(this) !== JSON.stringify(octetString))\n\t\t\treturn false;\n\t\t//endregion\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n\ttoString() {\n\t\tif (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\n\t\t\treturn Constructed.prototype.toString.call(this);\n\t\t} else {\n\t\t\treturn `${this.constructor.blockName()} : ${bufferToHexCodes(this.valueBlock.valueHex)}`;\n\t\t}\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 BitString type class\n//**************************************************************************************\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBitStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.unusedBits = getParametersValue(parameters, \"unusedBits\", 0);\n\t\tthis.isConstructed = getParametersValue(parameters, \"isConstructed\", false);\n\t\tthis.blockLength = this.valueHex.byteLength;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Ability to decode zero-length BitString value\n\t\tif(inputLength === 0)\n\t\t\treturn inputOffset;\n\t\t//endregion\n\n\t\tlet resultOffset = (-1);\n\n\t\t//region If the BISTRING supposed to be a constructed value\n\t\tif(this.isConstructed === true)\n\t\t{\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n\t\t\tif(resultOffset === (-1))\n\t\t\t\treturn resultOffset;\n\n\t\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t\t{\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\n\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\n\t\t\t\t{\n\t\t\t\t\tif(this.isIndefiniteForm === true)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\n\t\t\t\t\t\treturn (-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(currentBlockName !== BitString.blockName())\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"BIT STRING may consists of BIT STRINGs only\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\n\t\t\t\tif((this.unusedBits > 0) && (this.value[i].valueBlock.unusedBits > 0))\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"Using of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\n\t\t\t\tthis.unusedBits = this.value[i].valueBlock.unusedBits;\n\t\t\t\tif(this.unusedBits > 7)\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn resultOffset;\n\t\t}\n\t\t//endregion\n\t\t//region If the BitString supposed to be a primitive value\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\n\t\tthis.unusedBits = intBuffer[0];\n\t\t\n\t\tif(this.unusedBits > 7)\n\t\t{\n\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tif (!this.unusedBits) {\n\t\t\tconst buf = inputBuffer.slice(inputOffset + 1, inputOffset + inputLength);\n\t\t\ttry {\n\t\t\t\tconst asn = fromBER(buf);\n\t\t\t\tif (asn.offset !== -1 && asn.offset === (inputLength - 1)) {\n\t\t\t\t\tthis.value = [asn.result];\n\t\t\t\t}\n\t\t\t} catch(e) {\n\t\t\t\t// nothing\n\t\t\t}\n\t\t}\n\n\t\t//region Copy input buffer to internal buffer\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length - 1);\n\t\tconst view = new Uint8Array(this.valueHex);\n\t\tfor(let i = 0; i < (inputLength - 1); i++)\n\t\t\tview[i] = intBuffer[i + 1];\n\t\t//endregion\n\n\t\tthis.blockLength = intBuffer.length;\n\n\t\treturn (inputOffset + inputLength);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tif(this.isConstructed === true)\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\n\n\t\tif(sizeOnly === true)\n\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength + 1));\n\n\t\tif(this.valueHex.byteLength === 0)\n\t\t\treturn (new ArrayBuffer(0));\n\n\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\tconst retBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\n\t\tconst retView = new Uint8Array(retBuf);\n\n\t\tretView[0] = this.unusedBits;\n\n\t\tfor(let i = 0; i < this.valueHex.byteLength; i++)\n\t\t\tretView[i + 1] = curView[i];\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BitStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.unusedBits = this.unusedBits;\n\t\tobject.isConstructed = this.isConstructed;\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class BitString extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"BitString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalBitStringValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 3; // BitString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BIT STRING\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Ability to encode empty BitString\n\t\tif(inputLength === 0)\n\t\t\treturn inputOffset;\n\t\t//endregion\n\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Checking that two BITSTRINGs are equal\n\t * @param {BitString} bitString\n\t */\n\tisEqual(bitString)\n\t{\n\t\t//region Check input type\n\t\tif((bitString instanceof BitString) === false)\n\t\t\treturn false;\n\t\t//endregion\n\n\t\t//region Compare two JSON strings\n\t\tif(JSON.stringify(this) !== JSON.stringify(bitString))\n\t\t\treturn false;\n\t\t//endregion\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n\ttoString() {\n\t\tif (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\n\t\t\treturn Constructed.prototype.toString.call(this);\n\t\t} else {\n\t\t\t// convert bytes to bits\n\t\t\tconst bits = [];\n\t\t\tconst valueHex = new Uint8Array(this.valueBlock.valueHex);\n\t\t\tfor (const byte of valueHex) {\n\t\t\t\tbits.push(byte.toString(2).padStart(8, \"0\"));\n\t\t\t}\n\t\t\treturn `${this.constructor.blockName()} : ${bits.join(\"\")}`;\n\t\t}\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Integer type class\n//**************************************************************************************\n/**\n * @extends ValueBlock\n */\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalIntegerValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tif(\"value\" in parameters)\n\t\t\tthis.valueDec = parameters.value;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Setter for \"valueHex\"\n\t * @param {ArrayBuffer} _value\n\t */\n\tset valueHex(_value)\n\t{\n\t\tthis._valueHex = _value.slice(0);\n\n\t\tif(_value.byteLength >= 4)\n\t\t{\n\t\t\tthis.warnings.push(\"Too big Integer for decoding, hex only\");\n\t\t\tthis.isHexOnly = true;\n\t\t\tthis._valueDec = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.isHexOnly = false;\n\n\t\t\tif(_value.byteLength > 0)\n\t\t\t\tthis._valueDec = utilDecodeTC.call(this);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Getter for \"valueHex\"\n\t * @returns {ArrayBuffer}\n\t */\n\tget valueHex()\n\t{\n\t\treturn this._valueHex;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Getter for \"valueDec\"\n\t * @param {number} _value\n\t */\n\tset valueDec(_value)\n\t{\n\t\tthis._valueDec = _value;\n\n\t\tthis.isHexOnly = false;\n\t\tthis._valueHex = utilEncodeTC(_value);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Getter for \"valueDec\"\n\t * @returns {number}\n\t */\n\tget valueDec()\n\t{\n\t\treturn this._valueDec;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from DER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 DER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 DER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @param {number} [expectedLength=0] Expected length of converted \"valueHex\" buffer\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0)\n\t{\n\t\tconst offset = this.fromBER(inputBuffer, inputOffset, inputLength);\n\t\tif(offset === (-1))\n\t\t\treturn offset;\n\n\t\tconst view = new Uint8Array(this._valueHex);\n\n\t\tif((view[0] === 0x00) && ((view[1] & 0x80) !== 0))\n\t\t{\n\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\n\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\n\n\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(expectedLength !== 0)\n\t\t\t{\n\t\t\t\tif(this._valueHex.byteLength < expectedLength)\n\t\t\t\t{\n\t\t\t\t\tif((expectedLength - this._valueHex.byteLength) > 1)\n\t\t\t\t\t\texpectedLength = this._valueHex.byteLength + 1;\n\t\t\t\t\t\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(expectedLength);\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\t\t\tupdatedView.set(view, expectedLength - this._valueHex.byteLength);\n\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn offset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (DER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoDER(sizeOnly = false)\n\t{\n\t\tconst view = new Uint8Array(this._valueHex);\n\n\t\tswitch(true)\n\t\t{\n\t\t\tcase ((view[0] & 0x80) !== 0):\n\t\t\t\t{\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength + 1);\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\t\t\tupdatedView[0] = 0x00;\n\t\t\t\t\tupdatedView.set(view, 1);\n\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\n\t\t\t\t{\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\n\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\treturn this.toBER(sizeOnly);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n\t\tif(resultOffset === (-1))\n\t\t\treturn resultOffset;\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//noinspection JSCheckFunctionSignatures\n\t\treturn this.valueHex.slice(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"IntegerValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.valueDec = this.valueDec;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current value to decimal string representation\n\t */\n\ttoString()\n\t{\n\t\t//region Aux functions\n\t\tfunction viewAdd(first, second)\n\t\t{\n\t\t\t//region Initial variables\n\t\t\tconst c = new Uint8Array([0]);\n\t\t\t\n\t\t\tlet firstView = new Uint8Array(first);\n\t\t\tlet secondView = new Uint8Array(second);\n\t\t\t\n\t\t\tlet firstViewCopy = firstView.slice(0);\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\n\t\t\tlet secondViewCopy = secondView.slice(0);\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\n\t\t\t\n\t\t\tlet value = 0;\n\t\t\t\n\t\t\tconst max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\n\t\t\t\n\t\t\tlet counter = 0;\n\t\t\t//endregion\n\t\t\t\n\t\t\tfor(let i = max; i >= 0; i--, counter++)\n\t\t\t{\n\t\t\t\tswitch(true)\n\t\t\t\t{\n\t\t\t\t\tcase (counter < secondViewCopy.length):\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + c[0];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tc[0] = value / 10;\n\t\t\t\t\n\t\t\t\tswitch(true)\n\t\t\t\t{\n\t\t\t\t\tcase (counter >= firstViewCopy.length):\n\t\t\t\t\t\tfirstViewCopy = utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value % 10;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(c[0] > 0)\n\t\t\t\tfirstViewCopy = utilConcatView(c, firstViewCopy);\n\t\t\t\n\t\t\treturn firstViewCopy.slice(0);\n\t\t}\n\t\t\n\t\tfunction power2(n)\n\t\t{\n\t\t\tif(n >= powers2.length)\n\t\t\t{\n\t\t\t\tfor(let p = powers2.length; p <= n; p++)\n\t\t\t\t{\n\t\t\t\t\tconst c = new Uint8Array([0]);\n\t\t\t\t\tlet digits = (powers2[p - 1]).slice(0);\n\t\t\t\t\t\n\t\t\t\t\tfor(let i = (digits.length - 1); i >=0; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\n\t\t\t\t\t\tc[0] = newValue[0] / 10;\n\t\t\t\t\t\tdigits[i] = newValue[0] % 10;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (c[0] > 0)\n\t\t\t\t\t\tdigits = utilConcatView(c, digits);\n\t\t\t\t\t\n\t\t\t\t\tpowers2.push(digits);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn powers2[n];\n\t\t}\n\t\t\n\t\tfunction viewSub(first, second)\n\t\t{\n\t\t\t//region Initial variables\n\t\t\tlet b = 0;\n\t\t\t\n\t\t\tlet firstView = new Uint8Array(first);\n\t\t\tlet secondView = new Uint8Array(second);\n\t\t\t\n\t\t\tlet firstViewCopy = firstView.slice(0);\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\n\t\t\tlet secondViewCopy = secondView.slice(0);\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\n\t\t\t\n\t\t\tlet value;\n\t\t\t\n\t\t\tlet counter = 0;\n\t\t\t//endregion\n\t\t\t\n\t\t\tfor(let i = secondViewCopyLength; i >= 0; i--, counter++)\n\t\t\t{\n\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\n\t\t\t\t\n\t\t\t\tswitch(true)\n\t\t\t\t{\n\t\t\t\t\tcase (value < 0):\n\t\t\t\t\t\tb = 1;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(b > 0)\n\t\t\t{\n\t\t\t\tfor(let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++)\n\t\t\t\t{\n\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - b;\n\t\t\t\t\t\n\t\t\t\t\tif(value < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tb = 1;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn firstViewCopy.slice();\n\t\t}\n\t\t//endregion\n\t\t\n\t\t//region Initial variables\n\t\tconst firstBit = (this._valueHex.byteLength * 8) - 1;\n\t\t\n\t\tlet digits = new Uint8Array((this._valueHex.byteLength * 8) / 3);\n\t\tlet bitNumber = 0;\n\t\tlet currentByte;\n\t\t\n\t\tconst asn1View = new Uint8Array(this._valueHex);\n\t\t\n\t\tlet result = \"\";\n\t\t\n\t\tlet flag = false;\n\t\t//endregion\n\t\t\n\t\t//region Calculate number\n\t\tfor(let byteNumber = (this._valueHex.byteLength - 1); byteNumber >= 0; byteNumber--)\n\t\t{\n\t\t\tcurrentByte = asn1View[byteNumber];\n\t\t\t\n\t\t\tfor(let i = 0; i < 8; i++)\n\t\t\t{\n\t\t\t\tif((currentByte & 1) === 1)\n\t\t\t\t{\n\t\t\t\t\tswitch(bitNumber)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase firstBit:\n\t\t\t\t\t\t\tdigits = viewSub(power2(bitNumber), digits);\n\t\t\t\t\t\t\tresult = \"-\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdigits = viewAdd(digits, power2(bitNumber));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbitNumber++;\n\t\t\t\tcurrentByte >>= 1;\n\t\t\t}\n\t\t}\n\t\t//endregion\n\t\t\n\t\t//region Print number\n\t\tfor(let i = 0; i < digits.length; i++)\n\t\t{\n\t\t\tif(digits[i])\n\t\t\t\tflag = true;\n\t\t\t\n\t\t\tif(flag)\n\t\t\t\tresult += digitsString.charAt(digits[i]);\n\t\t}\n\t\t\n\t\tif(flag === false)\n\t\t\tresult += digitsString.charAt(0);\n\t\t//endregion\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Integer extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Integer\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalIntegerValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 2; // Integer\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"INTEGER\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Compare two Integer object, or Integer and ArrayBuffer objects\n\t * @param {!Integer|ArrayBuffer} otherValue\n\t * @returns {boolean}\n\t */\n\tisEqual(otherValue)\n\t{\n\t\tif(otherValue instanceof Integer)\n\t\t{\n\t\t\tif(this.valueBlock.isHexOnly && otherValue.valueBlock.isHexOnly) // Compare two ArrayBuffers\n\t\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue.valueBlock.valueHex);\n\n\t\t\tif(this.valueBlock.isHexOnly === otherValue.valueBlock.isHexOnly)\n\t\t\t\treturn (this.valueBlock.valueDec === otherValue.valueBlock.valueDec);\n\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif(otherValue instanceof ArrayBuffer)\n\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue);\n\n\t\treturn false;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current Integer value from BER into DER format\n\t * @returns {Integer}\n\t */\n\tconvertToDER()\n\t{\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\n\t\tinteger.valueBlock.toDER();\n\n\t\treturn integer;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current Integer value from DER to BER format\n\t * @returns {Integer}\n\t */\n\tconvertFromDER()\n\t{\n\t\tconst expectedLength = (this.valueBlock.valueHex.byteLength % 2) ? (this.valueBlock.valueHex.byteLength + 1) : this.valueBlock.valueHex.byteLength;\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\n\t\tinteger.valueBlock.fromDER(integer.valueBlock.valueHex, 0, integer.valueBlock.valueHex.byteLength, expectedLength);\n\t\t\n\t\treturn integer;\n\t}\n\t//**********************************************************************************\n\ttoString() {\n\t\tassertBigInt();\n\t\tconst hex = bufferToHexCodes(this.valueBlock.valueHex);\n\t\tconst bigInt = BigInt(`0x${hex}`);\n\t\treturn `${this.constructor.blockName()} : ${bigInt.toString()}`;\n\t}\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Enumerated type class\n//**************************************************************************************\nexport class Enumerated extends Integer\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Enumerated\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 10; // Enumerated\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"ENUMERATED\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 ObjectIdentifier type class\n//**************************************************************************************\nclass LocalSidValueBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalSidValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {number} [valueDec]\n\t * @property {boolean} [isFirstSid]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.valueDec = getParametersValue(parameters, \"valueDec\", -1);\n\t\tthis.isFirstSid = getParametersValue(parameters, \"isFirstSid\", false);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"sidBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tif(inputLength === 0)\n\t\t\treturn inputOffset;\n\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\n\t\tthis.valueHex = new ArrayBuffer(inputLength);\n\t\tlet view = new Uint8Array(this.valueHex);\n\n\t\tfor(let i = 0; i < inputLength; i++)\n\t\t{\n\t\t\tview[i] = intBuffer[i] & 0x7F;\n\n\t\t\tthis.blockLength++;\n\n\t\t\tif((intBuffer[i] & 0x80) === 0x00)\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//region Ajust size of valueHex buffer\n\t\tconst tempValueHex = new ArrayBuffer(this.blockLength);\n\t\tconst tempView = new Uint8Array(tempValueHex);\n\n\t\tfor(let i = 0; i < this.blockLength; i++)\n\t\t\ttempView[i] = view[i];\n\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tthis.valueHex = tempValueHex.slice(0);\n\t\tview = new Uint8Array(this.valueHex);\n\t\t//endregion\n\n\t\tif((intBuffer[this.blockLength - 1] & 0x80) !== 0x00)\n\t\t{\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tif(view[0] === 0x00)\n\t\t\tthis.warnings.push(\"Needlessly long format of SID encoding\");\n\n\t\tif(this.blockLength <= 8)\n\t\t\tthis.valueDec = utilFromBase(view, 7);\n\t\telse\n\t\t{\n\t\t\tthis.isHexOnly = true;\n\t\t\tthis.warnings.push(\"Too big SID for decoding, hex only\");\n\t\t}\n\n\t\treturn (inputOffset + this.blockLength);\n\t}\n//**********************************************************************************\n\t/**\n\t * Save a BigInt value immediately as an array of octects.\n\t */\n set valueBigInt(value) {\n\n\tassertBigInt();\n\n\tlet bits = BigInt(value).toString(2);\n\twhile (bits.length % 7) {\n\t\tbits = '0' + bits\n\t}\n\tconst bytes = new Uint8Array(bits.length / 7)\n\tfor (let i = 0; i < bytes.length; i++) {\n\t\tbytes[i] = parseInt(bits.slice(i*7, i*7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0)\n\t}\n\tthis.fromBER(bytes.buffer, 0, bytes.length)\n}\n//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//region Initial variables\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//endregion\n\n\t\tif(this.isHexOnly)\n\t\t{\n\t\t\tif(sizeOnly === true)\n\t\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength));\n\n\t\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\t\tretBuf = new ArrayBuffer(this.blockLength);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tfor(let i = 0; i < (this.blockLength - 1); i++)\n\t\t\t\tretView[i] = curView[i] | 0x80;\n\n\t\t\tretView[this.blockLength - 1] = curView[this.blockLength - 1];\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tconst encodedBuf = utilToBase(this.valueDec, 7);\n\t\tif(encodedBuf.byteLength === 0)\n\t\t{\n\t\t\tthis.error = \"Error during encoding SID value\";\n\t\t\treturn (new ArrayBuffer(0));\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength);\n\n\t\tif(sizeOnly === false)\n\t\t{\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tfor(let i = 0; i < (encodedBuf.byteLength - 1); i++)\n\t\t\t\tretView[i] = encodedView[i] | 0x80;\n\n\t\t\tretView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Create string representation of current SID block\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tlet result = \"\";\n\n\t\tif(this.isHexOnly === true)\n\t\t\tresult = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\t\telse\n\t\t{\n\t\t\tif(this.isFirstSid)\n\t\t\t{\n\t\t\t\tlet sidValue = this.valueDec;\n\n\t\t\t\tif(this.valueDec <= 39)\n\t\t\t\t\tresult = \"0.\";\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(this.valueDec <= 79)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = \"1.\";\n\t\t\t\t\t\tsidValue -= 40;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = \"2.\";\n\t\t\t\t\t\tsidValue -= 80;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresult += sidValue.toString();\n\t\t\t}\n\t\t\telse\n\t\t\t\tresult = this.valueDec.toString();\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.valueDec = this.valueDec;\n\t\tobject.isFirstSid = this.isFirstSid;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass LocalObjectIdentifierValueBlock extends ValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalObjectIdentifierValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.fromString(getParametersValue(parameters, \"value\", \"\"));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tlet resultOffset = inputOffset;\n\n\t\twhile(inputLength > 0)\n\t\t{\n\t\t\tconst sidBlock = new LocalSidValueBlock();\n\t\t\tresultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n\t\t\tif(resultOffset === (-1))\n\t\t\t{\n\t\t\t\tthis.blockLength = 0;\n\t\t\t\tthis.error = sidBlock.error;\n\t\t\t\treturn resultOffset;\n\t\t\t}\n\n\t\t\tif(this.value.length === 0)\n\t\t\t\tsidBlock.isFirstSid = true;\n\n\t\t\tthis.blockLength += sidBlock.blockLength;\n\t\t\tinputLength -= sidBlock.blockLength;\n\n\t\t\tthis.value.push(sidBlock);\n\t\t}\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tconst retBufs = [];\n\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t{\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\n\t\t\tif(valueBuf.byteLength === 0)\n\t\t\t{\n\t\t\t\tthis.error = this.value[i].error;\n\t\t\t\treturn (new ArrayBuffer(0));\n\t\t\t}\n\n\t\t\tretBufs.push(valueBuf);\n\t\t}\n\t\t\n\t\treturn utilConcatBuf(...retBufs);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Create \"LocalObjectIdentifierValueBlock\" class from string\n\t * @param {string} string Input string to convert from\n\t * @returns {boolean}\n\t */\n\tfromString(string)\n\t{\n\t\tthis.value = []; // Clear existing SID values\n\n\t\tlet pos1 = 0;\n\t\tlet pos2 = 0;\n\n\t\tlet sid = \"\";\n\n\t\tlet flag = false;\n\n\t\tdo\n\t\t{\n\t\t\tpos2 = string.indexOf(\".\", pos1);\n\t\t\tif(pos2 === (-1))\n\t\t\t\tsid = string.substr(pos1);\n\t\t\telse\n\t\t\t\tsid = string.substr(pos1, pos2 - pos1);\n\n\t\t\tpos1 = pos2 + 1;\n\n\t\t\tif(flag)\n\t\t\t{\n\t\t\t\tconst sidBlock = this.value[0];\n\n\t\t\t\tlet plus = 0;\n\n\t\t\t\tswitch(sidBlock.valueDec)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tplus = 40;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tplus = 80;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.value = []; // clear SID array\n\t\t\t\t\t\treturn false; // ???\n\t\t\t\t}\n\n\t\t\t\tconst parsedSID = parseInt(sid, 10);\n\t\t\t\tif(isNaN(parsedSID))\n\t\t\t\t\treturn true;\n\n\t\t\t\tsidBlock.valueDec = parsedSID + plus;\n\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconst sidBlock = new LocalSidValueBlock();\n        if (sid > Number.MAX_SAFE_INTEGER) {\n\t\t\t\t\tassertBigInt();\n\t\t\t\t\tconst sidValue = BigInt(sid);\n          sidBlock.valueBigInt = sidValue\n        } else {\n          sidBlock.valueDec = parseInt(sid, 10);\n          if (isNaN(sidBlock.valueDec)) return true;  \n        }\n\n\t\t\t\tif(this.value.length === 0)\n\t\t\t\t{\n\t\t\t\t\tsidBlock.isFirstSid = true;\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\n\t\t\t\tthis.value.push(sidBlock);\n\t\t\t}\n\t\t} while(pos2 !== (-1));\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Converts \"LocalObjectIdentifierValueBlock\" class to string\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tlet result = \"\";\n\t\tlet isHexOnly = false;\n\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t{\n\t\t\tisHexOnly = this.value[i].isHexOnly;\n\n\t\t\tlet sidStr = this.value[i].toString();\n\n\t\t\tif(i !== 0)\n\t\t\t\tresult = `${result}.`;\n\n\t\t\tif(isHexOnly)\n\t\t\t{\n\t\t\t\tsidStr = `{${sidStr}}`;\n\n\t\t\t\tif(this.value[i].isFirstSid)\n\t\t\t\t\tresult = `2.{${sidStr} - 80}`;\n\t\t\t\telse\n\t\t\t\t\tresult += sidStr;\n\t\t\t}\n\t\t\telse\n\t\t\t\tresult += sidStr;\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"ObjectIdentifierValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.value = this.toString();\n\t\tobject.sidArray = [];\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t\tobject.sidArray.push(this.value[i].toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class ObjectIdentifier extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"ObjectIdentifier\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalObjectIdentifierValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 6; // OBJECT IDENTIFIER\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"OBJECT IDENTIFIER\";\n\t}\n\t//**********************************************************************************\n\ttoString() {\n\t\treturn `${this.constructor.blockName()} : ${this.valueBlock.toString()}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of all string's classes\n//**************************************************************************************\nclass LocalUtf8StringValueBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Constructor for \"LocalUtf8StringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.isHexOnly = true;\n\t\tthis.value = \"\"; // String representation of decoded ArrayBuffer\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"Utf8StringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class Utf8String extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Utf8String\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalUtf8StringValueBlock);\n\n\t\tif(\"value\" in parameters)\n\t\t\tthis.fromString(parameters.value);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 12; // Utf8String\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"UTF8String\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\n\n\t\ttry\n\t\t{\n\t\t\t//noinspection JSDeprecatedSymbols\n\t\t\tthis.valueBlock.value = decodeURIComponent(escape(this.valueBlock.value));\n\t\t}\n\t\tcatch(ex)\n\t\t{\n\t\t\tthis.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\t//noinspection JSDeprecatedSymbols\n\t\tconst str = unescape(encodeURIComponent(inputString));\n\t\tconst strLen = str.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor(let i = 0; i < strLen; i++)\n\t\t\tview[i] = str.charCodeAt(i);\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n\ttoString() {\n\t\treturn `${this.constructor.blockName()} : ${this.valueBlock.value}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//region Declaration of ASN.1 RelativeObjectIdentifier type class\n//**************************************************************************************\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalRelativeSidValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {number} [valueDec]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.valueDec = getParametersValue(parameters, \"valueDec\", -1);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"relativeSidBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tif (inputLength === 0)\n\t\t\treturn inputOffset;\n\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif (checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\n\t\tthis.valueHex = new ArrayBuffer(inputLength);\n\t\tlet view = new Uint8Array(this.valueHex);\n\n\t\tfor (let i = 0; i < inputLength; i++)\n\t\t{\n\t\t\tview[i] = intBuffer[i] & 0x7F;\n\n\t\t\tthis.blockLength++;\n\n\t\t\tif ((intBuffer[i] & 0x80) === 0x00)\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//region Ajust size of valueHex buffer\n\t\tconst tempValueHex = new ArrayBuffer(this.blockLength);\n\t\tconst tempView = new Uint8Array(tempValueHex);\n\n\t\tfor (let i = 0; i < this.blockLength; i++)\n\t\t\ttempView[i] = view[i];\n\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tthis.valueHex = tempValueHex.slice(0);\n\t\tview = new Uint8Array(this.valueHex);\n\t\t//endregion\n\n\t\tif ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00)\n\t\t{\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tif (view[0] === 0x00)\n\t\t\tthis.warnings.push(\"Needlessly long format of SID encoding\");\n\n\t\tif (this.blockLength <= 8)\n\t\t\tthis.valueDec = utilFromBase(view, 7);\n\t\telse\n\t\t{\n\t\t\tthis.isHexOnly = true;\n\t\t\tthis.warnings.push(\"Too big SID for decoding, hex only\");\n\t\t}\n\n\t\treturn (inputOffset + this.blockLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//region Initial variables\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//endregion\n\n\t\tif (this.isHexOnly)\n\t\t{\n\t\t\tif (sizeOnly === true)\n\t\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength));\n\n\t\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\t\tretBuf = new ArrayBuffer(this.blockLength);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tfor (let i = 0; i < (this.blockLength - 1); i++)\n\t\t\t\tretView[i] = curView[i] | 0x80;\n\n\t\t\tretView[this.blockLength - 1] = curView[this.blockLength - 1];\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tconst encodedBuf = utilToBase(this.valueDec, 7);\n\t\tif (encodedBuf.byteLength === 0)\n\t\t{\n\t\t\tthis.error = \"Error during encoding SID value\";\n\t\t\treturn (new ArrayBuffer(0));\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength);\n\n\t\tif (sizeOnly === false)\n\t\t{\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tfor (let i = 0; i < (encodedBuf.byteLength - 1); i++)\n\t\t\t\tretView[i] = encodedView[i] | 0x80;\n\n\t\t\tretView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Create string representation of current SID block\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tlet result = \"\";\n\n\t\tif (this.isHexOnly === true)\n\t\t\tresult = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\t\telse {\n\t\t\tresult = this.valueDec.toString();\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry {\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.valueDec = this.valueDec;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock {\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalRelativeObjectIdentifierValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.fromString(getParametersValue(parameters, \"value\", \"\"));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tlet resultOffset = inputOffset;\n\n\t\twhile (inputLength > 0)\n\t\t{\n\t\t\tconst sidBlock = new LocalRelativeSidValueBlock();\n\t\t\tresultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n\t\t\tif (resultOffset === (-1))\n\t\t\t{\n\t\t\t\tthis.blockLength = 0;\n\t\t\t\tthis.error = sidBlock.error;\n\t\t\t\treturn resultOffset;\n\t\t\t}\n\n\t\t\tthis.blockLength += sidBlock.blockLength;\n\t\t\tinputLength -= sidBlock.blockLength;\n\n\t\t\tthis.value.push(sidBlock);\n\t\t}\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tlet retBufs = new ArrayBuffer(0);\n\n\t\tfor (let i = 0; i < this.value.length; i++)\n\t\t{\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\n\t\t\tif (valueBuf.byteLength === 0)\n\t\t\t{\n\t\t\t\tthis.error = this.value[i].error;\n\t\t\t\treturn (new ArrayBuffer(0));\n\t\t\t}\n\n\t\t\tretBufs.push(valueBuf);\n\t\t}\n\t\t\n\t\treturn utilConcatBuf(...retBufs);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Create \"LocalRelativeObjectIdentifierValueBlock\" class from string\n\t * @param {string} string Input string to convert from\n\t * @returns {boolean}\n\t */\n\tfromString(string)\n\t{\n\t\tthis.value = []; // Clear existing SID values\n\n\t\tlet pos1 = 0;\n\t\tlet pos2 = 0;\n\n\t\tlet sid = \"\";\n\n\t\tdo\n\t\t{\n\t\t\tpos2 = string.indexOf(\".\", pos1);\n\t\t\tif (pos2 === (-1))\n\t\t\t\tsid = string.substr(pos1);\n\t\t\telse\n\t\t\t\tsid = string.substr(pos1, pos2 - pos1);\n\n\t\t\tpos1 = pos2 + 1;\n\n\t\t\tconst sidBlock = new LocalRelativeSidValueBlock();\n\t\t\tsidBlock.valueDec = parseInt(sid, 10);\n\t\t\tif (isNaN(sidBlock.valueDec))\n\t\t\t\treturn true;\n\n\t\t\tthis.value.push(sidBlock);\n\n\t\t} while (pos2 !== (-1));\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Converts \"LocalRelativeObjectIdentifierValueBlock\" class to string\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tlet result = \"\";\n\t\tlet isHexOnly = false;\n\n\t\tfor (let i = 0; i < this.value.length; i++)\n\t\t{\n\t\t\tisHexOnly = this.value[i].isHexOnly;\n\n\t\t\tlet sidStr = this.value[i].toString();\n\n\t\t\tif (i !== 0)\n\t\t\t\tresult = `${result}.`;\n\n\t\t\tif (isHexOnly)\n\t\t\t{\n\t\t\t\tsidStr = `{${sidStr}}`;\n\t\t\t\tresult += sidStr;\n\t\t\t} else\n\t\t\t\tresult += sidStr;\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"RelativeObjectIdentifierValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t} catch (ex) {}\n\t\t//endregion\n\n\t\tobject.value = this.toString();\n\t\tobject.sidArray = [];\n\t\tfor (let i = 0; i < this.value.length; i++)\n\t\t\tobject.sidArray.push(this.value[i].toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class RelativeObjectIdentifier extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"RelativeObjectIdentifier\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalRelativeObjectIdentifierValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 13; // RELATIVE OBJECT IDENTIFIER\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"RelativeObjectIdentifier\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n/**\n * @extends LocalBaseBlock\n * @extends HexBlock\n */\nclass LocalBmpStringValueBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBmpStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.isHexOnly = true;\n\t\tthis.value = \"\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BmpStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class BmpString extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"BmpString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalBmpStringValueBlock);\n\n\t\tif(\"value\" in parameters)\n\t\t\tthis.fromString(parameters.value);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 30; // BmpString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BMPString\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tconst copyBuffer = inputBuffer.slice(0);\n\t\tconst valueView = new Uint8Array(copyBuffer);\n\n\t\tfor(let i = 0; i < valueView.length; i += 2)\n\t\t{\n\t\t\tconst temp = valueView[i];\n\n\t\t\tvalueView[i] = valueView[i + 1];\n\t\t\tvalueView[i + 1] = temp;\n\t\t}\n\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint16Array(copyBuffer));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\tconst strLength = inputString.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 2);\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor(let i = 0; i < strLength; i++)\n\t\t{\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\n\t\t\tconst codeView = new Uint8Array(codeBuf);\n\t\t\tif(codeView.length > 2)\n\t\t\t\tcontinue;\n\n\t\t\tconst dif = 2 - codeView.length;\n\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\n\t\t\t\tvalueHexView[i * 2 + j + dif] = codeView[j];\n\t\t}\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n\ttoString() {\n\t\treturn `${this.constructor.blockName()} : ${this.valueBlock.value}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass LocalUniversalStringValueBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalUniversalStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.isHexOnly = true;\n\t\tthis.value = \"\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"UniversalStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class UniversalString extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"UniversalString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalUniversalStringValueBlock);\n\n\t\tif(\"value\" in parameters)\n\t\t\tthis.fromString(parameters.value);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 28; // UniversalString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"UniversalString\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tconst copyBuffer = inputBuffer.slice(0);\n\t\tconst valueView = new Uint8Array(copyBuffer);\n\n\t\tfor(let i = 0; i < valueView.length; i += 4)\n\t\t{\n\t\t\tvalueView[i] = valueView[i + 3];\n\t\t\tvalueView[i + 1] = valueView[i + 2];\n\t\t\tvalueView[i + 2] = 0x00;\n\t\t\tvalueView[i + 3] = 0x00;\n\t\t}\n\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\tconst strLength = inputString.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 4);\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor(let i = 0; i < strLength; i++)\n\t\t{\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\n\t\t\tconst codeView = new Uint8Array(codeBuf);\n\t\t\tif(codeView.length > 4)\n\t\t\t\tcontinue;\n\n\t\t\tconst dif = 4 - codeView.length;\n\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\n\t\t\t\tvalueHexView[i * 4 + j + dif] = codeView[j];\n\t\t}\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n\ttoString() {\n\t\treturn `${this.constructor.blockName()} : ${this.valueBlock.value}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass LocalSimpleStringValueBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalSimpleStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.value = \"\";\n\t\tthis.isHexOnly = true;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"SimpleStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nclass LocalSimpleStringBlock extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalSimpleStringBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalSimpleStringValueBlock);\n\n\t\tif(\"value\" in parameters)\n\t\t\tthis.fromString(parameters.value);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"SIMPLESTRING\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\tconst strLen = inputString.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor(let i = 0; i < strLen; i++)\n\t\t\tview[i] = inputString.charCodeAt(i);\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n\ttoString() {\n\t\treturn `${this.constructor.blockName()} : ${this.valueBlock.value}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class NumericString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"NumericString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 18; // NumericString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"NumericString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class PrintableString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"PrintableString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 19; // PrintableString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"PrintableString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class TeletexString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"TeletexString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 20; // TeletexString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"TeletexString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class VideotexString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"VideotexString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 21; // VideotexString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"VideotexString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class IA5String extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"IA5String\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 22; // IA5String\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"IA5String\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class GraphicString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"GraphicString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 25; // GraphicString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"GraphicString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class VisibleString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"VisibleString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 26; // VisibleString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"VisibleString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class GeneralString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"GeneralString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 27; // GeneralString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"GeneralString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class CharacterString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"CharacterString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 29; // CharacterString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"CharacterString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of all date and time classes\n//**************************************************************************************\n/**\n * @extends VisibleString\n */\nexport class UTCTime extends VisibleString\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"UTCTime\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [value] String representatio of the date\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.year = 0;\n\t\tthis.month = 0;\n\t\tthis.day = 0;\n\t\tthis.hour = 0;\n\t\tthis.minute = 0;\n\t\tthis.second = 0;\n\n\t\t//region Create UTCTime from ASN.1 UTC string value\n\t\tif(\"value\" in parameters)\n\t\t{\n\t\t\tthis.fromString(parameters.value);\n\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\n\t\t}\n\t\t//endregion\n\t\t//region Create GeneralizedTime from JavaScript Date type\n\t\tif(\"valueDate\" in parameters)\n\t\t{\n\t\t\tthis.fromDate(parameters.valueDate);\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\n\t\t}\n\t\t//endregion\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 23; // UTCTime\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ASN.1 internal string into ArrayBuffer\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBuffer()\n\t{\n\t\tconst str = this.toString();\n\n\t\tconst buffer = new ArrayBuffer(str.length);\n\t\tconst view = new Uint8Array(buffer);\n\n\t\tfor(let i = 0; i < str.length; i++)\n\t\t\tview[i] = str.charCodeAt(i);\n\n\t\treturn buffer;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting \"Date\" object into ASN.1 internal string\n\t * @param {!Date} inputDate JavaScript \"Date\" object\n\t */\n\tfromDate(inputDate)\n\t{\n\t\tthis.year = inputDate.getUTCFullYear();\n\t\tthis.month = inputDate.getUTCMonth() + 1;\n\t\tthis.day = inputDate.getUTCDate();\n\t\tthis.hour = inputDate.getUTCHours();\n\t\tthis.minute = inputDate.getUTCMinutes();\n\t\tthis.second = inputDate.getUTCSeconds();\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Function converting ASN.1 internal string into \"Date\" object\n\t * @returns {Date}\n\t */\n\ttoDate()\n\t{\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\t//region Parse input string\n\t\tconst parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\n\t\tconst parserArray = parser.exec(inputString);\n\t\tif(parserArray === null)\n\t\t{\n\t\t\tthis.error = \"Wrong input string for convertion\";\n\t\t\treturn;\n\t\t}\n\t\t//endregion\n\n\t\t//region Store parsed values\n\t\tconst year = parseInt(parserArray[1], 10);\n\t\tif(year >= 50)\n\t\t\tthis.year = 1900 + year;\n\t\telse\n\t\t\tthis.year = 2000 + year;\n\n\t\tthis.month = parseInt(parserArray[2], 10);\n\t\tthis.day = parseInt(parserArray[3], 10);\n\t\tthis.hour = parseInt(parserArray[4], 10);\n\t\tthis.minute = parseInt(parserArray[5], 10);\n\t\tthis.second = parseInt(parserArray[6], 10);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ASN.1 internal class into JavaScript string\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tconst outputArray = new Array(7);\n\n\t\toutputArray[0] = padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\n\t\toutputArray[1] = padNumber(this.month, 2);\n\t\toutputArray[2] = padNumber(this.day, 2);\n\t\toutputArray[3] = padNumber(this.hour, 2);\n\t\toutputArray[4] = padNumber(this.minute, 2);\n\t\toutputArray[5] = padNumber(this.second, 2);\n\t\toutputArray[6] = \"Z\";\n\n\t\treturn outputArray.join(\"\");\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"UTCTime\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.year = this.year;\n\t\tobject.month = this.month;\n\t\tobject.day = this.day;\n\t\tobject.hour = this.hour;\n\t\tobject.minute = this.minute;\n\t\tobject.second = this.second;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends VisibleString\n */\nexport class GeneralizedTime extends VisibleString\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"GeneralizedTime\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [value] String representatio of the date\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.year = 0;\n\t\tthis.month = 0;\n\t\tthis.day = 0;\n\t\tthis.hour = 0;\n\t\tthis.minute = 0;\n\t\tthis.second = 0;\n\t\tthis.millisecond = 0;\n\n\t\t//region Create UTCTime from ASN.1 UTC string value\n\t\tif(\"value\" in parameters)\n\t\t{\n\t\t\tthis.fromString(parameters.value);\n\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\n\t\t}\n\t\t//endregion\n\t\t//region Create GeneralizedTime from JavaScript Date type\n\t\tif(\"valueDate\" in parameters)\n\t\t{\n\t\t\tthis.fromDate(parameters.valueDate);\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\n\t\t}\n\t\t//endregion\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 24; // GeneralizedTime\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ASN.1 internal string into ArrayBuffer\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBuffer()\n\t{\n\t\tconst str = this.toString();\n\n\t\tconst buffer = new ArrayBuffer(str.length);\n\t\tconst view = new Uint8Array(buffer);\n\n\t\tfor(let i = 0; i < str.length; i++)\n\t\t\tview[i] = str.charCodeAt(i);\n\n\t\treturn buffer;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting \"Date\" object into ASN.1 internal string\n\t * @param {!Date} inputDate JavaScript \"Date\" object\n\t */\n\tfromDate(inputDate)\n\t{\n\t\tthis.year = inputDate.getUTCFullYear();\n\t\tthis.month = inputDate.getUTCMonth() + 1;\n\t\tthis.day = inputDate.getUTCDate();\n\t\tthis.hour = inputDate.getUTCHours();\n\t\tthis.minute = inputDate.getUTCMinutes();\n\t\tthis.second = inputDate.getUTCSeconds();\n\t\tthis.millisecond = inputDate.getUTCMilliseconds();\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Function converting ASN.1 internal string into \"Date\" object\n\t * @returns {Date}\n\t */\n\ttoDate()\n\t{\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\t//region Initial variables\n\t\tlet isUTC = false;\n\n\t\tlet timeString = \"\";\n\t\tlet dateTimeString = \"\";\n\t\tlet fractionPart = 0;\n\n\t\tlet parser;\n\n\t\tlet hourDifference = 0;\n\t\tlet minuteDifference = 0;\n\t\t//endregion\n\n\t\t//region Convert as UTC time\n\t\tif(inputString[inputString.length - 1] === \"Z\")\n\t\t{\n\t\t\ttimeString = inputString.substr(0, inputString.length - 1);\n\n\t\t\tisUTC = true;\n\t\t}\n\t\t//endregion\n\t\t//region Convert as local time\n\t\telse\n\t\t{\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\tconst number = new Number(inputString[inputString.length - 1]);\n\n\t\t\tif(isNaN(number.valueOf()))\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\t\ttimeString = inputString;\n\t\t}\n\t\t//endregion\n\n\t\t//region Check that we do not have a \"+\" and \"-\" symbols inside UTC time\n\t\tif(isUTC)\n\t\t{\n\t\t\tif(timeString.indexOf(\"+\") !== (-1))\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\t\tif(timeString.indexOf(\"-\") !== (-1))\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\t\t}\n\t\t//endregion\n\t\t//region Get \"UTC time difference\" in case of local time\n\t\telse\n\t\t{\n\t\t\tlet multiplier = 1;\n\t\t\tlet differencePosition = timeString.indexOf(\"+\");\n\t\t\tlet differenceString = \"\";\n\n\t\t\tif(differencePosition === (-1))\n\t\t\t{\n\t\t\t\tdifferencePosition = timeString.indexOf(\"-\");\n\t\t\t\tmultiplier = (-1);\n\t\t\t}\n\n\t\t\tif(differencePosition !== (-1))\n\t\t\t{\n\t\t\t\tdifferenceString = timeString.substr(differencePosition + 1);\n\t\t\t\ttimeString = timeString.substr(0, differencePosition);\n\n\t\t\t\tif((differenceString.length !== 2) && (differenceString.length !== 4))\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\t\tlet number = new Number(differenceString.substr(0, 2));\n\n\t\t\t\tif(isNaN(number.valueOf()))\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\t\t\thourDifference = multiplier * number;\n\n\t\t\t\tif(differenceString.length === 4)\n\t\t\t\t{\n\t\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\t\t\tnumber = new Number(differenceString.substr(2, 2));\n\n\t\t\t\t\tif(isNaN(number.valueOf()))\n\t\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\t\t\t\tminuteDifference = multiplier * number;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//endregion\n\n\t\t//region Get position of fraction point\n\t\tlet fractionPointPosition = timeString.indexOf(\".\"); // Check for \"full stop\" symbol\n\t\tif(fractionPointPosition === (-1))\n\t\t\tfractionPointPosition = timeString.indexOf(\",\"); // Check for \"comma\" symbol\n\t\t//endregion\n\n\t\t//region Get fraction part\n\t\tif(fractionPointPosition !== (-1))\n\t\t{\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\tconst fractionPartCheck = new Number(`0${timeString.substr(fractionPointPosition)}`);\n\n\t\t\tif(isNaN(fractionPartCheck.valueOf()))\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\t\tfractionPart = fractionPartCheck.valueOf();\n\n\t\t\tdateTimeString = timeString.substr(0, fractionPointPosition);\n\t\t}\n\t\telse\n\t\t\tdateTimeString = timeString;\n\t\t//endregion\n\n\t\t//region Parse internal date\n\t\tswitch(true)\n\t\t{\n\t\t\tcase (dateTimeString.length === 8): // \"YYYYMMDD\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})/ig;\n\t\t\t\tif(fractionPointPosition !== (-1))\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\"); // Here we should not have a \"fraction point\"\n\t\t\t\tbreak;\n\t\t\tcase (dateTimeString.length === 10): // \"YYYYMMDDHH\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n\t\t\t\tif(fractionPointPosition !== (-1))\n\t\t\t\t{\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\n\t\t\t\t\tthis.minute = Math.floor(fractionResult);\n\n\t\t\t\t\tfractionResult = 60 * (fractionResult - this.minute);\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\n\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase (dateTimeString.length === 12): // \"YYYYMMDDHHMM\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n\t\t\t\tif(fractionPointPosition !== (-1))\n\t\t\t\t{\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\n\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase (dateTimeString.length === 14): // \"YYYYMMDDHHMMSS\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n\t\t\t\tif(fractionPointPosition !== (-1))\n\t\t\t\t{\n\t\t\t\t\tconst fractionResult = 1000 * fractionPart;\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\t\t}\n\t\t//endregion\n\n\t\t//region Put parsed values at right places\n\t\tconst parserArray = parser.exec(dateTimeString);\n\t\tif(parserArray === null)\n\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\tfor(let j = 1; j < parserArray.length; j++)\n\t\t{\n\t\t\tswitch(j)\n\t\t\t{\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.year = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.month = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.day = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tthis.hour = parseInt(parserArray[j], 10) + hourDifference;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tthis.minute = parseInt(parserArray[j], 10) + minuteDifference;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tthis.second = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\t\t\t}\n\t\t}\n\t\t//endregion\n\n\t\t//region Get final date\n\t\tif(isUTC === false)\n\t\t{\n\t\t\tconst tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n\n\t\t\tthis.year = tempDate.getUTCFullYear();\n\t\t\tthis.month = tempDate.getUTCMonth();\n\t\t\tthis.day = tempDate.getUTCDay();\n\t\t\tthis.hour = tempDate.getUTCHours();\n\t\t\tthis.minute = tempDate.getUTCMinutes();\n\t\t\tthis.second = tempDate.getUTCSeconds();\n\t\t\tthis.millisecond = tempDate.getUTCMilliseconds();\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ASN.1 internal class into JavaScript string\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(padNumber(this.year, 4));\n\t\toutputArray.push(padNumber(this.month, 2));\n\t\toutputArray.push(padNumber(this.day, 2));\n\t\toutputArray.push(padNumber(this.hour, 2));\n\t\toutputArray.push(padNumber(this.minute, 2));\n\t\toutputArray.push(padNumber(this.second, 2));\n\t\tif(this.millisecond !== 0)\n\t\t{\n\t\t\toutputArray.push(\".\");\n\t\t\toutputArray.push(padNumber(this.millisecond, 3));\n\t\t}\n\t\toutputArray.push(\"Z\");\n\n\t\treturn outputArray.join(\"\");\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"GeneralizedTime\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.year = this.year;\n\t\tobject.month = this.month;\n\t\tobject.day = this.day;\n\t\tobject.hour = this.hour;\n\t\tobject.minute = this.minute;\n\t\tobject.second = this.second;\n\t\tobject.millisecond = this.millisecond;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class DATE extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"DATE\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 31; // DATE\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"DATE\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class TimeOfDay extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"TimeOfDay\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 32; // TimeOfDay\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"TimeOfDay\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class DateTime extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"DateTime\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 33; // DateTime\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"DateTime\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class Duration extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Duration\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 34; // Duration\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"Duration\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class TIME extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Time\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 14; // Time\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"TIME\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type Choice\n//**************************************************************************************\nexport class Choice\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Choice\" class\n\t * @param {Object} [parameters={}]\n\t * @property {Array} [value] Array of ASN.1 types for make a choice from\n\t * @property {boolean} [optional]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tthis.value = getParametersValue(parameters, \"value\", []);\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type Any\n//**************************************************************************************\nexport class Any\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Any\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [name]\n\t * @property {boolean} [optional]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type Repeated\n//**************************************************************************************\nexport class Repeated\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Repeated\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [name]\n\t * @property {boolean} [optional]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\n\t\tthis.value = getParametersValue(parameters, \"value\", new Any());\n\t\tthis.local = getParametersValue(parameters, \"local\", false); // Could local or global array to store elements\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type RawData\n//**************************************************************************************\n/**\n * @description Special class providing ability to have \"toBER/fromBER\" for raw ArrayBuffer\n */\nexport class RawData\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Repeated\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [name]\n\t * @property {boolean} [optional]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tthis.data = getParametersValue(parameters, \"data\", new ArrayBuffer(0));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tthis.data = inputBuffer.slice(inputOffset, inputLength);\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\treturn this.data;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Major ASN.1 BER decoding function\n//**************************************************************************************\n/**\n * Internal library function for decoding ASN.1 BER\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n * @returns {{offset: number, result: Object}}\n */\nfunction LocalFromBER(inputBuffer, inputOffset, inputLength)\n{\n\tconst incomingOffset = inputOffset; // Need to store initial offset since \"inputOffset\" is changing in the function\n\n\t//region Local function changing a type for ASN.1 classes\n\tfunction localChangeType(inputObject, newType)\n\t{\n\t\tif(inputObject instanceof newType)\n\t\t\treturn inputObject;\n\n\t\tconst newObject = new newType();\n\t\tnewObject.idBlock = inputObject.idBlock;\n\t\tnewObject.lenBlock = inputObject.lenBlock;\n\t\tnewObject.warnings = inputObject.warnings;\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tnewObject.valueBeforeDecode = inputObject.valueBeforeDecode.slice(0);\n\n\t\treturn newObject;\n\t}\n\t//endregion\n\n\t//region Create a basic ASN.1 type since we need to return errors and warnings from the function\n\tlet returnObject = new BaseBlock({}, Object);\n\t//endregion\n\n\t//region Basic check for parameters\n\tconst baseBlock = new LocalBaseBlock();\n\tif(checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) === false)\n\t{\n\t\treturnObject.error = baseBlock.error;\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\t//endregion\n\n\t//region Getting Uint8Array from ArrayBuffer\n\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t//endregion\n\n\t//region Initial checks\n\tif(intBuffer.length === 0)\n\t{\n\t\treturnObject.error = \"Zero buffer length\";\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\t//endregion\n\n\t//region Decode indentifcation block of ASN.1 BER structure\n\tlet resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\n\treturnObject.warnings.concat(returnObject.idBlock.warnings);\n\tif(resultOffset === (-1))\n\t{\n\t\treturnObject.error = returnObject.idBlock.error;\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\n\tinputOffset = resultOffset;\n\tinputLength -= returnObject.idBlock.blockLength;\n\t//endregion\n\n\t//region Decode length block of ASN.1 BER structure\n\tresultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\n\treturnObject.warnings.concat(returnObject.lenBlock.warnings);\n\tif(resultOffset === (-1))\n\t{\n\t\treturnObject.error = returnObject.lenBlock.error;\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\n\tinputOffset = resultOffset;\n\tinputLength -= returnObject.lenBlock.blockLength;\n\t//endregion\n\n\t//region Check for usign indefinite length form in encoding for primitive types\n\tif((returnObject.idBlock.isConstructed === false) &&\n\t\t(returnObject.lenBlock.isIndefiniteForm === true))\n\t{\n\t\treturnObject.error = \"Indefinite length form used for primitive encoding form\";\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\t//endregion\n\n\t//region Switch ASN.1 block type\n\tlet newASN1Type = BaseBlock;\n\n\tswitch(returnObject.idBlock.tagClass)\n\t{\n\t\t//region UNIVERSAL\n\t\tcase 1:\n\t\t\t//region Check for reserved tag numbers\n\t\t\tif((returnObject.idBlock.tagNumber >= 37) &&\n\t\t\t\t(returnObject.idBlock.isHexOnly === false))\n\t\t\t{\n\t\t\t\treturnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\n\t\t\t\treturn {\n\t\t\t\t\toffset: (-1),\n\t\t\t\t\tresult: returnObject\n\t\t\t\t};\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\tswitch(returnObject.idBlock.tagNumber)\n\t\t\t{\n\t\t\t\t//region EndOfContent type\n\t\t\t\tcase 0:\n\t\t\t\t\t//region Check for EndOfContent type\n\t\t\t\t\tif((returnObject.idBlock.isConstructed === true) &&\n\t\t\t\t\t\t(returnObject.lenBlock.length > 0))\n\t\t\t\t\t{\n\t\t\t\t\t\treturnObject.error = \"Type [UNIVERSAL 0] is reserved\";\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\toffset: (-1),\n\t\t\t\t\t\t\tresult: returnObject\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t//endregion\n\n\t\t\t\t\tnewASN1Type = EndOfContent;\n\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Boolean type\n\t\t\t\tcase 1:\n\t\t\t\t\tnewASN1Type = Boolean;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Integer type\n\t\t\t\tcase 2:\n\t\t\t\t\tnewASN1Type = Integer;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region BitString type\n\t\t\t\tcase 3:\n\t\t\t\t\tnewASN1Type = BitString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region OctetString type\n\t\t\t\tcase 4:\n\t\t\t\t\tnewASN1Type = OctetString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Null type\n\t\t\t\tcase 5:\n\t\t\t\t\tnewASN1Type = Null;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region OBJECT IDENTIFIER type\n\t\t\t\tcase 6:\n\t\t\t\t\tnewASN1Type = ObjectIdentifier;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Enumerated type\n\t\t\t\tcase 10:\n\t\t\t\t\tnewASN1Type = Enumerated;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Utf8String type\n\t\t\t\tcase 12:\n\t\t\t\t\tnewASN1Type = Utf8String;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Time type\n\t\t\t\t//region RELATIVE OBJECT IDENTIFIER type\n\t\t\t\tcase 13:\n\t\t\t\t\tnewASN1Type = RelativeObjectIdentifier;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\tcase 14:\n\t\t\t\t\tnewASN1Type = TIME;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region ASN.1 reserved type\n\t\t\t\tcase 15:\n\t\t\t\t\treturnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\n\t\t\t\t\treturn {\n\t\t\t\t\t\toffset: (-1),\n\t\t\t\t\t\tresult: returnObject\n\t\t\t\t\t};\n\t\t\t\t//endregion\n\t\t\t\t//region Sequence type\n\t\t\t\tcase 16:\n\t\t\t\t\tnewASN1Type = Sequence;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Set type\n\t\t\t\tcase 17:\n\t\t\t\t\tnewASN1Type = Set;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region NumericString type\n\t\t\t\tcase 18:\n\t\t\t\t\tnewASN1Type = NumericString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region PrintableString type\n\t\t\t\tcase 19:\n\t\t\t\t\tnewASN1Type = PrintableString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region TeletexString type\n\t\t\t\tcase 20:\n\t\t\t\t\tnewASN1Type = TeletexString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region VideotexString type\n\t\t\t\tcase 21:\n\t\t\t\t\tnewASN1Type = VideotexString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region IA5String type\n\t\t\t\tcase 22:\n\t\t\t\t\tnewASN1Type = IA5String;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region UTCTime type\n\t\t\t\tcase 23:\n\t\t\t\t\tnewASN1Type = UTCTime;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region GeneralizedTime type\n\t\t\t\tcase 24:\n\t\t\t\t\tnewASN1Type = GeneralizedTime;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region GraphicString type\n\t\t\t\tcase 25:\n\t\t\t\t\tnewASN1Type = GraphicString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region VisibleString type\n\t\t\t\tcase 26:\n\t\t\t\t\tnewASN1Type = VisibleString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region GeneralString type\n\t\t\t\tcase 27:\n\t\t\t\t\tnewASN1Type = GeneralString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region UniversalString type\n\t\t\t\tcase 28:\n\t\t\t\t\tnewASN1Type = UniversalString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region CharacterString type\n\t\t\t\tcase 29:\n\t\t\t\t\tnewASN1Type = CharacterString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region BmpString type\n\t\t\t\tcase 30:\n\t\t\t\t\tnewASN1Type = BmpString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region DATE type\n\t\t\t\tcase 31:\n\t\t\t\t\tnewASN1Type = DATE;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region TimeOfDay type\n\t\t\t\tcase 32:\n\t\t\t\t\tnewASN1Type = TimeOfDay;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Date-Time type\n\t\t\t\tcase 33:\n\t\t\t\t\tnewASN1Type = DateTime;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Duration type\n\t\t\t\tcase 34:\n\t\t\t\t\tnewASN1Type = Duration;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region default\n\t\t\t\tdefault:\n\t\t\t\t\t{\n\t\t\t\t\t\tlet newObject;\n\n\t\t\t\t\t\tif(returnObject.idBlock.isConstructed === true)\n\t\t\t\t\t\t\tnewObject = new Constructed();\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tnewObject = new Primitive();\n\n\t\t\t\t\t\tnewObject.idBlock = returnObject.idBlock;\n\t\t\t\t\t\tnewObject.lenBlock = returnObject.lenBlock;\n\t\t\t\t\t\tnewObject.warnings = returnObject.warnings;\n\n\t\t\t\t\t\treturnObject = newObject;\n\t\t\t\t\t}\n\t\t\t\t//endregion\n\t\t\t}\n\t\t\tbreak;\n\t\t//endregion\n\t\t//region All other tag classes\n\t\tcase 2: // APPLICATION\n\t\tcase 3: // CONTEXT-SPECIFIC\n\t\tcase 4: // PRIVATE\n\t\tdefault:\n\t\t\t{\n\t\t\t\tif(returnObject.idBlock.isConstructed === true)\n\t\t\t\t\tnewASN1Type = Constructed;\n\t\t\t\telse\n\t\t\t\t\tnewASN1Type = Primitive;\n\t\t\t}\n\t\t//endregion\n\t}\n\t//endregion\n\n\t//region Change type and perform BER decoding\n\treturnObject = localChangeType(returnObject, newASN1Type);\n\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, (returnObject.lenBlock.isIndefiniteForm === true) ? inputLength : returnObject.lenBlock.length);\n\t//endregion\n\n\t//region Coping incoming buffer for entire ASN.1 block\n\treturnObject.valueBeforeDecode = inputBuffer.slice(incomingOffset, incomingOffset + returnObject.blockLength);\n\t//endregion\n\n\treturn {\n\t\toffset: resultOffset,\n\t\tresult: returnObject\n\t};\n}\n//**************************************************************************************\n/**\n * Major function for decoding ASN.1 BER array into internal library structuries\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array of bytes\n */\nexport function fromBER(inputBuffer)\n{\n\tif(inputBuffer.byteLength === 0)\n\t{\n\t\tconst result = new BaseBlock({}, Object);\n\t\tresult.error = \"Input buffer has zero length\";\n\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult\n\t\t};\n\t}\n\n\treturn LocalFromBER(inputBuffer, 0, inputBuffer.byteLength);\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Major scheme verification function\n//**************************************************************************************\n/**\n * Compare of two ASN.1 object trees\n * @param {!Object} root Root of input ASN.1 object tree\n * @param {!Object} inputData Input ASN.1 object tree\n * @param {!Object} inputSchema Input ASN.1 schema to compare with\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\n */\nexport function compareSchema(root, inputData, inputSchema)\n{\n\t//region Special case for Choice schema element type\n\tif(inputSchema instanceof Choice)\n\t{\n\t\tconst choiceResult = false;\n\n\t\tfor(let j = 0; j < inputSchema.value.length; j++)\n\t\t{\n\t\t\tconst result = compareSchema(root, inputData, inputSchema.value[j]);\n\t\t\tif(result.verified === true)\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\tverified: true,\n\t\t\t\t\tresult: root\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif(choiceResult === false)\n\t\t{\n\t\t\tconst _result = {\n\t\t\t\tverified: false,\n\t\t\t\tresult: {\n\t\t\t\t\terror: \"Wrong values for Choice type\"\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t\t_result.name = inputSchema.name;\n\n\t\t\treturn _result;\n\t\t}\n\t}\n\t//endregion\n\n\t//region Special case for Any schema element type\n\tif(inputSchema instanceof Any)\n\t{\n\t\t//region Add named component of ASN.1 schema\n\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\troot[inputSchema.name] = inputData;\n\t\t//endregion\n\n\t\treturn {\n\t\t\tverified: true,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\n\t//region Initial check\n\tif((root instanceof Object) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong root object\" }\n\t\t};\n\t}\n\n\tif((inputData instanceof Object) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 data\" }\n\t\t};\n\t}\n\n\tif((inputSchema instanceof Object) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif((\"idBlock\" in inputSchema) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\t//endregion\n\n\t//region Comparing idBlock properties in ASN.1 data and ASN.1 schema\n\t//region Encode and decode ASN.1 schema idBlock\n\t/// <remarks>This encoding/decoding is neccessary because could be an errors in schema definition</remarks>\n\tif((\"fromBER\" in inputSchema.idBlock) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif((\"toBER\" in inputSchema.idBlock) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tconst encodedId = inputSchema.idBlock.toBER(false);\n\tif(encodedId.byteLength === 0)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Error encoding idBlock for ASN.1 schema\" }\n\t\t};\n\t}\n\n\tconst decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\n\tif(decodedOffset === (-1))\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Error decoding idBlock for ASN.1 schema\" }\n\t\t};\n\t}\n\t//endregion\n\n\t//region tagClass\n\tif(inputSchema.idBlock.hasOwnProperty(\"tagClass\") === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif(inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region tagNumber\n\tif(inputSchema.idBlock.hasOwnProperty(\"tagNumber\") === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif(inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region isConstructed\n\tif(inputSchema.idBlock.hasOwnProperty(\"isConstructed\") === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif(inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region isHexOnly\n\tif((\"isHexOnly\" in inputSchema.idBlock) === false) // Since 'isHexOnly' is an inhirited property\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif(inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region valueHex\n\tif(inputSchema.idBlock.isHexOnly === true)\n\t{\n\t\tif((\"valueHex\" in inputSchema.idBlock) === false) // Since 'valueHex' is an inhirited property\n\t\t{\n\t\t\treturn {\n\t\t\t\tverified: false,\n\t\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t\t};\n\t\t}\n\n\t\tconst schemaView = new Uint8Array(inputSchema.idBlock.valueHex);\n\t\tconst asn1View = new Uint8Array(inputData.idBlock.valueHex);\n\n\t\tif(schemaView.length !== asn1View.length)\n\t\t{\n\t\t\treturn {\n\t\t\t\tverified: false,\n\t\t\t\tresult: root\n\t\t\t};\n\t\t}\n\n\t\tfor(let i = 0; i < schemaView.length; i++)\n\t\t{\n\t\t\tif(schemaView[i] !== asn1View[1])\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\tverified: false,\n\t\t\t\t\tresult: root\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\t//endregion\n\t//endregion\n\n\t//region Add named component of ASN.1 schema\n\tif(inputSchema.hasOwnProperty(\"name\"))\n\t{\n\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\tif(inputSchema.name !== \"\")\n\t\t\troot[inputSchema.name] = inputData;\n\t}\n\t//endregion\n\n\t//region Getting next ASN.1 block for comparition\n\tif(inputSchema.idBlock.isConstructed === true)\n\t{\n\t\tlet admission = 0;\n\t\tlet result = { verified: false };\n\n\t\tlet maxLength = inputSchema.valueBlock.value.length;\n\n\t\tif(maxLength > 0)\n\t\t{\n\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\n\t\t\t\tmaxLength = inputData.valueBlock.value.length;\n\t\t}\n\n\t\t//region Special case when constructive value has no elements\n\t\tif(maxLength === 0)\n\t\t{\n\t\t\treturn {\n\t\t\t\tverified: true,\n\t\t\t\tresult: root\n\t\t\t};\n\t\t}\n\t\t//endregion\n\n\t\t//region Special case when \"inputData\" has no values and \"inputSchema\" has all optional values\n\t\tif((inputData.valueBlock.value.length === 0) &&\n\t\t\t(inputSchema.valueBlock.value.length !== 0))\n\t\t{\n\t\t\tlet _optional = true;\n\n\t\t\tfor(let i = 0; i < inputSchema.valueBlock.value.length; i++)\n\t\t\t\t_optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\n\n\t\t\tif(_optional === true)\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\tverified: true,\n\t\t\t\t\tresult: root\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t//region Delete early added name of block\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t{\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\troot.error = \"Inconsistent object length\";\n\n\t\t\treturn {\n\t\t\t\tverified: false,\n\t\t\t\tresult: root\n\t\t\t};\n\t\t}\n\t\t//endregion\n\n\t\tfor(let i = 0; i < maxLength; i++)\n\t\t{\n\t\t\t//region Special case when there is an \"optional\" element of ASN.1 schema at the end\n\t\t\tif((i - admission) >= inputData.valueBlock.value.length)\n\t\t\t{\n\t\t\t\tif(inputSchema.valueBlock.value[i].optional === false)\n\t\t\t\t{\n\t\t\t\t\tconst _result = {\n\t\t\t\t\t\tverified: false,\n\t\t\t\t\t\tresult: root\n\t\t\t\t\t};\n\n\t\t\t\t\troot.error = \"Inconsistent length between ASN.1 data and schema\";\n\n\t\t\t\t\t//region Delete early added name of block\n\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t\t\t_result.name = inputSchema.name;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//endregion\n\n\t\t\t\t\treturn _result;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//endregion\n\t\t\telse\n\t\t\t{\n\t\t\t\t//region Special case for Repeated type of ASN.1 schema element\n\t\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\n\t\t\t\t{\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\n\t\t\t\t\tif(result.verified === false)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[0].optional === true)\n\t\t\t\t\t\t\tadmission++;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//region Delete early added name of block\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif((\"name\" in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0))\n\t\t\t\t\t{\n\t\t\t\t\t\tlet arrayRoot = {};\n\n\t\t\t\t\t\tif((\"local\" in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local === true))\n\t\t\t\t\t\t\tarrayRoot = inputData;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tarrayRoot = root;\n\n\t\t\t\t\t\tif(typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\n\t\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name] = [];\n\n\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//endregion\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\n\t\t\t\t\tif(result.verified === false)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[i].optional === true)\n\t\t\t\t\t\t\tadmission++;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//region Delete early added name of block\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(result.verified === false) // The situation may take place if last element is \"optional\" and verification failed\n\t\t{\n\t\t\tconst _result = {\n\t\t\t\tverified: false,\n\t\t\t\tresult: root\n\t\t\t};\n\n\t\t\t//region Delete early added name of block\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t{\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t{\n\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t_result.name = inputSchema.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\treturn _result;\n\t\t}\n\n\t\treturn {\n\t\t\tverified: true,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region Ability to parse internal value for primitive-encoded value (value of OctetString, for example)\n\tif((\"primitiveSchema\" in inputSchema) &&\n\t\t(\"valueHex\" in inputData.valueBlock))\n\t{\n\t\t//region Decoding of raw ASN.1 data\n\t\tconst asn1 = fromBER(inputData.valueBlock.valueHex);\n\t\tif(asn1.offset === (-1))\n\t\t{\n\t\t\tconst _result = {\n\t\t\t\tverified: false,\n\t\t\t\tresult: asn1.result\n\t\t\t};\n\n\t\t\t//region Delete early added name of block\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t{\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t{\n\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t_result.name = inputSchema.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\treturn _result;\n\t\t}\n\t\t//endregion\n\n\t\treturn compareSchema(root, asn1.result, inputSchema.primitiveSchema);\n\t}\n\n\treturn {\n\t\tverified: true,\n\t\tresult: root\n\t};\n\t//endregion\n}\n//**************************************************************************************\n//noinspection JSUnusedGlobalSymbols\n/**\n * ASN.1 schema verification for ArrayBuffer data\n * @param {!ArrayBuffer} inputBuffer Input BER-encoded ASN.1 data\n * @param {!Object} inputSchema Input ASN.1 schema to verify against to\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\n */\nexport function verifySchema(inputBuffer, inputSchema)\n{\n\t//region Initial check\n\tif((inputSchema instanceof Object) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema type\" }\n\t\t};\n\t}\n\t//endregion\n\n\t//region Decoding of raw ASN.1 data\n\tconst asn1 = fromBER(inputBuffer);\n\tif(asn1.offset === (-1))\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: asn1.result\n\t\t};\n\t}\n\t//endregion\n\n\t//region Compare ASN.1 struct with input schema\n\treturn compareSchema(asn1.result, asn1.result, inputSchema);\n\t//endregion\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Major function converting JSON to ASN.1 objects\n//**************************************************************************************\n//noinspection JSUnusedGlobalSymbols\n/**\n * Converting from JSON to ASN.1 objects\n * @param {string|Object} json JSON string or object to convert to ASN.1 objects\n */\nexport function fromJSON(json)\n{\n\t// TODO Implement\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n"],"file":"asn1.js"}